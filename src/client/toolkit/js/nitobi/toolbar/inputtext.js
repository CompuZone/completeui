/*
 * Nitobi Complete UI 1.0
 * Copyright(c) 2008, Nitobi
 * support@nitobi.com
 * 
 * http://www.nitobi.com/license
 */

// *****************************************************************************
// *****************************************************************************
// * nitobi.ui.Toolbar
// *****************************************************************************
/// <class name='nitobi.ui.Toolbar'>
/// <summary>


/// </summary>

nitobi.ui.InputXsl = 

   "<xsl:template match=\"//inputtext\">"+
	 "<input type=\"text\" class=\"ntb-inputtext\" gridInput=\"true\">"+
	 "<xsl:attribute name=\"value\" >"+
			"<xsl:value-of select=\"@value\" />"+
     "</xsl:attribute>"+
	 "<xsl:attribute name=\"onblur\">"+
	 	// The following line is var e='@onclick_event';eval(this.OnClickHandler(f)); generated by EbaConstructValidXpathQuery
		// e.g. writeLog(EbaConstructValidXpathQuery("var f='X';eval(this.object.OnClickHandler(e));")); and then replace X with @onblur_event
	    "<xsl:value-of select='concat(&quot;v&quot;,&quot;a&quot;,&quot;r&quot;,&quot; &quot;,&quot;f&quot;,&quot;=&quot;,&quot;&apos;&quot;,@onblur_event,&quot;&apos;&quot;,&quot;;&quot;,&quot;e&quot;,&quot;v&quot;,&quot;a&quot;,&quot;l&quot;,&quot;(&quot;,&quot;t&quot;,&quot;h&quot;,&quot;i&quot;,&quot;s&quot;,&quot;.&quot;,&quot;o&quot;,&quot;b&quot;,&quot;j&quot;,&quot;e&quot;,&quot;c&quot;,&quot;t&quot;,&quot;.&quot;,&quot;o&quot;,&quot;n&quot;,&quot;B&quot;,&quot;l&quot;,&quot;u&quot;,&quot;r&quot;,&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;d&quot;,&quot;l&quot;,&quot;e&quot;,&quot;r&quot;,&quot;(&quot;,&quot;f&quot;,&quot;)&quot;,&quot;)&quot;,&quot;;&quot;,&apos;&apos;)' />"+
	 "</xsl:attribute>"+	 	 
	 "<xsl:attribute name=\"id\" >"+
            "<xsl:value-of select=\"@id\" />"+
         "</xsl:attribute>"+
		 "<xsl:attribute name=\"style\">"+
			"<xsl:value-of select=\"concat('margin-top:3','px; margin-bottom:0','px;','width:',@width,'px;height:',@height,'px; float:',@float,';')\" />"+
	 "</xsl:attribute>"+
	"</input>"+
   "</xsl:template>";
   
/**
 * An input text.
 * @constructor
 * @extends nitobi.ui.InteractiveUiElement
 * @param xml {string} XML that defines the input text.
 * @param id {string} The id of the button.
 * @private
 */
nitobi.ui.InputText = function (xml, id)
{
	this.initialize(xml,nitobi.ui.InputText,id);
	this.enable();
}


nitobi.lang.extend(nitobi.ui.InputText, nitobi.ui.InteractiveUiElement);
/**
 * Fired when the input text is clicked.
 * @private
 */
nitobi.ui.InputText.prototype.onClickHandler = function (callbackCode)
{
	if (this.m_Enabled)
	{
		eval(callbackCode);
	}
}

/**
 * Fired when the input text loses focus.
 * @private
 */
nitobi.ui.InputText.prototype.onBlurHandler = function (callbackCode)
{
	if (this.m_Enabled)
	{
		eval(callbackCode);
	}
}

/**
 * Disables the input text so that it cannot be edited
 */
nitobi.ui.InputText.prototype.disable = function ()
{
	nitobi.ui.InputText.base.disable.call(this);
	var inputtext = this.getHtmlElementHandle();
}

/**
 * Enables the input text for use.
 */
nitobi.ui.InputText.prototype.enable = function()
{
	nitobi.ui.InputText.base.enable.call(this);
	var inputtext = this.getHtmlElementHandle();

}

nitobi.ui.InputText.prototype.dispose = function()
{
	nitobi.ui.InputText.base.dispose.call(this);
};