<?xml version="1.0" encoding="UTF-8"?>
<taglib id="nitobiJSFTaglib"
        xmlns="http://java.sun.com/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"
        version="2.1">
    <description>This taglib is for use with the Nitobi JSF custom components. This version of the taglib is compatable
        with JSF 1.2 and later, since it takes advantage of EL.
    </description>
    <display-name>Nitobi JSF 1.2 Components Taglib</display-name>
    <tlib-version>1.2</tlib-version>
    <short-name>nitobi-jsf</short-name>
    <uri>http://www.nitobi.com/jsf</uri>


    <!--*************************************************************************************************************-->
    <!--                                          COMBO BOX RELATED TAGS                                             -->
    <!--*************************************************************************************************************-->
    <!-- COMBO TAG -->
    <tag>
        <description>
            The Nitobi ComboBox component. It will automatically include the necessary javascript and stylesheet.
        </description>
        <name>combo</name>
        <tag-class>com.nitobi.jsf.taglib.combo.ComboBoxTag</tag-class>
        <body-content>scriptless</body-content>
        <!-- ID -->
        <attribute>
            <description><![CDATA[Returns the id of the combo on the HTML page. This id must be unique for this view, and note that JSF will prepend this value with the form name separated by a colon. You can use this Id to get a reference to the combo on the page. For example, to get a reference to the combo's HTML tag:

                 var comboTag = $('ComboId');
                 var combo = comboTag.jsObject;
                 if (comboTag.jsObject == nitobi.getComponent('ComboId'))
                 {
                        alert('They're the same!');
                 }


                ]]>
            </description>
            <name>id</name>
            <required>true</required>
            <rtexprvalue>false</rtexprvalue>
        </attribute>
        <!-- VALUE -->
        <attribute>
            <description>
                <![CDATA[This is the JSF-only value attribute that can be used with a value expression to tie the components value with a managed bean.]]></description>
            <name>value</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Object</type>
            </deferred-value>
        </attribute>
        <!-- AUTOINITIALIZE -->
        <attribute>
            <description><![CDATA[Whether or not the component should initialize on load]]>
            </description>
            <name>autoInitialize</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- THEME -->
        <attribute>
            <description><![CDATA[Defines the look and feel of the combo box. Currently available:
            <ul>
                <li>basicgrey</li>
                <li>bluetrim</li>
                <li>cmail</li>
                <li>contactsearh</li>
                <li>desktopsearch</li>
                <li>flex</li>
                <li>ice</li>
                <li>outlook</li>
                <li>outlookmini</li>
                <li>recordsearch</li>
                <li>suggests</li>
                <li>tiger</li>
                <li>vista</li>
                <li>visiualstudio</li>
                <li>winofficexp</li>
                <li>winxpblue</li>
                <li>winxpsilver</li>
            </ul>
            ]]></description>
            <name>theme</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- CSS CLASS NAME -->
        <attribute>
            <description><![CDATA[<p>Returns the name of a custom CSS class to associate with the entire combo box. If this is left as an empty string, then the 'ComboBox' class is used. Refer to the CSS file for details on this class, and which CSS attributes you must supply to use a custom class. You can include a custom class by using the HTML style tags or by using a stylesheet.</p>

                <p>Example:<br/><br/>

                <code>&lt;ntb:Combo id="combo1" CSSClassName="customClass"/&gt;</code>
                <br/><br/>
                is the same as this javascript function call<br/><br/>
                <code>nitobi.getComponent("combo1").setCSSClassName('customClass');</code>
                </pre>
                </p>
                ]]>
            </description>
            <name>cssClassName</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- DATA TEXT FIELD -->
        <attribute>
            <description>
                <![CDATA[Returns the name of the field in the dataset that provides text for the list to display. If you want a combo that displays key/value pairs, use this property. The DataTextField is the field used as a display value, and the DataValueField is used as a key value, and is the value returned when using GetSelectedItem. If you only specify one of these it is used as both the TextField and the ValueField.]]>
            </description>
            <name>dataTextField</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- DATA VALUE FIELD -->
        <attribute>
            <description>
                <![CDATA[Returns the name of the field in the dataset that provides data for the list. Use this if you only want one column, and you don't want to use the ListColumnDefinition tag. If you want a combo that displays key/value pairs, use this property. The DataTextField is the field used as a display value, and the DataValueField is used as a key value, and is the value returned when using GetSelectedItem. If you only specify one of these it is used as both the TextField and the ValueField.]]>
            </description>
            <name>dataValueField</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- DISABLED WARNING MESSAGE -->
        <attribute>
            <description>
                <![CDATA[Disables warning messages issued by the combo. This is a comma separates list of ids or, to disable all warnings, set this to *.]]>
            </description>
            <name>disabledWarningMessages</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ENABLED -->
        <attribute>
            <description><![CDATA[Determines whether the combo is enabled for user interaction. Note that the enabled/disabled distinction is different from the editable/non-editable distinction. When the ComboBox is disabled, both the textbox and list are disabled whereas if the ComboBox is non-editable, the list is still accessible while the textbox is disabled.

                Example


                 if(nitobi.getComponent('combo1').GetEnabled() == true)
                 {
                        // Check if the ComboBox is enabled before programatically setting
                        // the value in the TextBox
                        nitobi.getComponent('combo1').SetTextValue("We're enabled!");
                 }


                ]]>
            </description>
            <name>enabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ERROR LEVEL -->
        <attribute>
            <description>
                <![CDATA[Set this to EBAERROR_LEVEL_DEBUG if you want to see debug messages. If no value is supplied, no debug messages are shown. To disable certain warning messages see DisabledWarningMessages.]]>
            </description>
            <name>errorLevel</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- HEIGHT -->
        <attribute>
            <description>
                <![CDATA[Returns the height of the combo in html units, e.g. 100px or 100%. If you use this property, nitobi.combo.TextBox.Height is ignored. This property is only used when the mode is set to SmartList. In all other modes, the height of the component is defined in css.]]>
            </description>
            <name>height</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- HTTP REQUEST METHOD -->
        <attribute>
            <description>
                <![CDATA[Returns the kind of server request is used when requesting data, GET or POST. The default is GET. In some cases a POST is useful because certain form fields are posted with the request.]]>
            </description>
            <name>httpRequestMethod</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- INITIAL SEARCH -->
        <attribute>
            <description>
                <![CDATA[Returns the initial value to search for and select in the dataset. Only in bound search modes. When the combo is bound to a datasource, you can use this property make the combo search the datasource at load time.]]>
            </description>
            <name>initialSearch</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- LIST Z INDEX -->
        <attribute>
            <description><![CDATA[Specifies the order of combo lists on the page along the Z axis.]]>
            </description>
            <name>listZIndex</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- MODE -->
        <attribute>
            <description><![CDATA[
                    <p>Returns the search and render mode of this combo. It can be one of
                        <ul>
                            <li>classic</li>
                            <li>compact</li>
                            <li>filter</li>
                            <li>smartlist</li>
                            <li>smartsearch</li>
                            <li>unbound</li>
                        </ul>
                    </p>
                ]]>
            </description>
            <name>mode</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- SMART LIST SEPARATOR -->
        <attribute>
            <description>
                <![CDATA[Returns the character used to separate selected list records, in SmartList mode. The default value is "," (comma). You should try to pick a value that will not appear in your datasource.]]>
            </description>
            <name>smartListSeparator</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- TAB INDEX -->
        <attribute>
            <description><![CDATA[Returns the HTML tab index of the combo box.]]>
            </description>
            <name>tabIndex</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- WIDTH -->
        <attribute>
            <description>
                <![CDATA[Returns the width of the combo in html units, eg 100px or 100%. If you use this property, TextBox.Width is ignored. This does not set the width of the list: use nitobi.combo.List.SetWidth]]>
            </description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ON BEFORE SELECT EVENT -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeSelectEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ON BLUR EVENT -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBlurEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ON FOCUS EVENT -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ON LOAD EVENT -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onLoadEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ON SELECT EVENT -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onSelectEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ON TAB EVENT -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onTabEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- COMBO BUTTON TAG -->
    <tag>
        <description>The ComboBox tag</description>
        <name>comboButton</name>
        <tag-class>com.nitobi.jsf.taglib.combo.ComboButtonTag</tag-class>
        <body-content>empty</body-content>
        <attribute>
            <description>
                <![CDATA[The name of the CSS class that defines the combo's button in the normal position. Do not include the dot in the class name.]]>
            </description>
            <name>defaultCSSClassName</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Returns the button's height in HTML units, e.g. 16px.]]>
            </description>
            <name>height</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The name of the CSS class that defines the combo's button in the pressed position. If this is left as an empty string, then the 'ComboBoxButtonPressed' class is used. Refer to the CSS file for details on this class, and which CSS attributes you must supply to use a custom class. You can include a custom class by using the HTML style tags or by using a stylesheet.]]>
            </description>
            <name>pressedCSSClassName</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Returns the button's width in HTML units, e.g. 16px.]]>
            </description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description></description>
            <name>onBeforeSelectEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description></description>
            <name>onBlurEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description></description>
            <name>onFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description></description>
            <name>onLoadEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description></description>
            <name>onSelectEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description></description>
            <name>onTabEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- COMBO TEXTBOX TAG -->
    <tag>
        <description>Creates a ComboTextBox element</description>
        <name>comboTextBox</name>
        <tag-class>com.nitobi.jsf.taglib.combo.ComboTextBoxTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description>
                <![CDATA[Returns the name of a custom CSS class to associate with the textbox. If this is left as an empty string, then the 'ComboBoxText' class is used. Refer to the CSS file for details on these classes, and which CSS attributes you must supply to use custom classes. You can include custom classes by using the HTML style tags or by using a stylesheet.]]>
            </description>
            <name>cssClassName</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>Returns the index of the datafield (data column) to
                use as a datasource for the textbox. When the user types in the
                textbox, the combo will search this column for a match. Similarly,
                when the user clicks a row, this column's value will be entered into
                the textbox.
            </description>
            <name>dataFieldIndex</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Returns true if the user can type in the textbox and false otherwise. The rest of the combo is still navigable when this property is false, and a value will be displayed in it once the user makes a selection. Use this if you want the user to select a value from the list, and not type a custom value.]]>
            </description>
            <name>editable</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Returns the height of the text box in HTML units, e.g., 50px. In classic mode, if you increase the height of the textbox, you should also increase the height of the button. In all modes except smartlist, if you increase the height of the textbox, you should also increase the size of the font in the CSS file.]]>
            </description>
            <name>height</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Returns the text value in the textbox. This can be a custom value that the user has typed. Setting this value does not mean a specific list item will be selected. To check if the user has selected something from the list, use nitobi.combo.Combo.GetSelectedRowIndex. To set a specific item from the list as selection, use nitobi.combo.List.SetSelectedRow in conjunction with this property.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Returns the width of the text box in HTML units. If the combo is in smartlist mode, then this width is the width of the textbox. When in smartlist mode, you can also set the width to a percentage. In this mode, however, this is equivalent to nitobi.combo.Combo.GetWidth.]]>
            </description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description></description>
            <name>onEditKeyUpEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- COMBO LIST TAG -->
    <tag>
        <description>A ComboList tag</description>
        <name>comboList</name>
        <tag-class>com.nitobi.jsf.taglib.combo.ComboListTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description>Returns true if paging is allowed, false otherwise.
                Only classic mode supports paging. If you enable paging, the
                gethandler attached to the datasource must be setup to deliver
                data one page at a time. See the tutorials for detailed information.
            </description>
            <name>allowPaging</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>Returns the HTML color that the background of a row
                changes to when highlighted, e.g., #FFFFFF or red, etc. You can
                also use HighlightCSSClassName for more control but setting only
                the color yields better performance. The default is 'highlight'.
            </description>
            <name>backgroundHighlightColor</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the server-side resource containing the GetHandler populating the list. This can
                either be entered in two ways:
                <ul>
                    <li>
                        Servlet: (e.g., eventsurl="eventsServlet") This option automatically looks for a servlet name
                        as defined in the web.xml file.
                    </li>
                    <li>
                        Managed Bean: (e.g., eventsurl="#{mybean.mymethod}") This option requires a
                        'java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)' signature
                        in your managed bean.
                    </li>
                </ul>
                ]]>
            </description>

            <name>datasourceUrl</name>
            <required>false</required>
            <deferred-method>
                <method-signature>java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)</method-signature>
            </deferred-method>
        </attribute>
        <attribute>
            <description><![CDATA[Returns a custom HTML definition for each row. 
                DataTextFields are specified inside the definition as such: 
                ${0} for field 0, ${1} for field 1 and so on. E.g. '<b>${0}</b>'. 
                You can have more records in your datasource than are displayed 
                using this property. This enables you to hide key values from 
                the user, but still have them returned once they make a selection. 
                If this is used, the ListColumnDefinitions are ignored. If this 
                property is changed after the Combo has loaded its records, 
                future records will be rendered according to the new 
                CustomHTMLDefinition, but already rendered records will not 
                change. If you want to re-render the list, you will have to 
                first use .Clear and the nitobi.combo.XmlDataSource.Clear methods]]>
            </description>
            <name>customHTMLDefinition</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>Returns the custom HTML definition for the list header.
                If this is used, the HeaderLabels from the ListColumnDefinition
                tag will not be used. This is the text display as a header at the
                top of the list and is a simple HTML string. It applies to all
                columns.
            </description>
            <name>customHTMLHeader</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Returns the HTML color that the foreground (text) of a row changes to when highlighted, e.g., #FFFFFF or red, etc. You can also use HighlightCSSClassName for more control but setting only the color yields better performance. The default is 'highlight'.]]>
            </description>
            <name>foregroundHighlightColor</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Sets whether or not to allow fuzzy searching. If set to true, the get handler can return anything from a search result, even if it does not match the search type for the mode. When the combo requests data from the server with a search substring, the search type depends on the mode. Smartsearch and smartlist modes perform substring matching, while other modes perform prefix matching. When the data returns to the client, the combo performs a local search in order to highlight search strings, and select the correct default row. If it cannot match the string on the client-side and FuzzySearch is not enabled, then the behaviour is unpredictable. If FuzzySearch is enabled, then no client side matching is attempted, then combo simply displays the search results.]]>
            </description>
            <name>fuzzySearchEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Returns the height of the list body. This must be an HTML measurement, e.g., 100px. The list body is the list excluding headers and footers. This is equivalent to GetSectionHeight(EBAComboBoxListBody); To get the height of the entire list use GetActualPixelHeight.

                Example


                 var list = nitobi.getComponent('combo1').GetList();
                 var bodyHeight = list.GetHeight();  // A string like "205px"
                 var listHeight = list.GetActualPixelHeight();  // A number like 250
                 if (parseInt(bodyHeight) != listHeight)
                 {
                        alert('They are not equal!');
                 }


                ]]>
            </description>
            <name>height</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Returns the CSS style applied to the row when the user highlights it. Use BackgroundHighlightColor for better performance. The default CSS class that all combos use is ComboBoxListBodyTableRowHighlighted, which is stored in the CSS file. If you want to modify all combos on the page, you can modify this class. If you only want to affect one combo you can copy this class and then set HighlightCSSClassName to the copy.]]>
            </description>
            <name>highlightCSSClassName</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Returns the number of records retrieved at a time from the server. If clipping is turned on (according to the mode used), then the value returned may not actually correspond with the displayed pagesize because the record set that is returned from the server is clipped according to the clip length.

                For this List definition:


                 <ntb:ComboList Width="370px" Height="205px" DatasourceUrl="get.jsp" PageSize="11" ClipLength="5">


                consider the following:


                 var list = nitobi.getComponent('combo1').GetList();
                 list.GetPageSize();  // Will be 11


                ]]>
            </description>
            <name>pageSize</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Returns the width of the list in pixels or percent, e.g., 100px or 100% as specified in the Width attribute of the List element. This is not the same as the combo width.

                Example


                 var list = nitobi.getComponent('combo1').GetList();
                 if (list.GetWidth() != list.GetActualPixelWidth())
                 {
                        alert('They are not the same');
                 }


                ]]>
            </description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description></description>
            <name>onAfterSearchEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description></description>
            <name>onBeforeSearchEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description></description>
            <name>onHideEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description></description>
            <name>onShowEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- COMBO COLUMN DEFINITION TAG -->
    <tag>
        <description>The ComboColumnDefinition tag</description>
        <name>comboColumnDefinition</name>
        <tag-class>com.nitobi.jsf.taglib.combo.ComboColumnDefinitionTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description>Returns the alignment of text in this column as one
                of left, right, or center. If this property is changed after
                the Combo has loaded its records, future records will be
                rendered according to the new ListColumnDefinition, but already
                rendered records will not change. If you want to re-render the
                list, you will have to call the nitobi.combo.List.Clear and
                the nitobi.combo.XmlDatasource.Clear methods.
            </description>
            <name>align</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>Returns the type of the column. It can be one of TEXT
                or IMAGE. If IMAGE is used, you must also specify the
                ImageHandlerURL property.
            </description>
            <name>columnType</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>Returns the name of the CSS class that defines the
                style for this column. The default CSS class that all
                ListColumnDefinitions in all Combos is ComboBoxListColumnDefinition,
                which is stored in the CSS file. If you want to modify all combos
                on the page, you can modify this class. If you only want to affect
                one combo you can copy this class and then set CSSClassName to the
                copy.
            </description>
            <name>cssClassName</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Returns the index of the data field that 
                populates this column. If you leave this field empty, it will 
                use the ordinal position of the ListColumnDefinition within 
                the List.ListColumnDefinitions collection.]]>
            </description>
            <name>dataFieldIndex</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Returns the string displayed as the header 
                for this column. This allows you define headers for each column of 
                data in the list. Use CustomHTMLHeader if you only want one header 
                that spans all columns.]]>
            </description>
            <name>headerLabel</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>Returns the HTML code that will be added before each
                row value in this column. This is HTML code that is added before
                each value in each row of this column. This can include any valid
                HTML code including closing tags that were written using the
                HTMLSuffix property. If this property is changed after the Combo has
                loaded its records, future records will be rendered according to
                the new value, but already rendered records will not change. If you
                want to re-render the list, you will have to call the
                nitobi.combo.List.Clear and the nitobi.combo.XmlDatasource.Clear
                methods.
            </description>
            <name>htmlPrefix</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>Returns the HTML code that will be added after each
                row value in this column. This is HTML code that is added after
                each value in each row of this column. This can include any
                valid HTML code including closing tags that were written using
                the HTMLPrefix property. If this property is changed after the
                Combo has loaded its records, future records will be rendered
                according to the new value, but already rendered records will
                not change. If you want to re-render the list, you will have
                to call the nitobi.combo.List.Clear and the
                nitobi.combo.XmlDatasource.Clear methods.
            </description>
            <name>htmlSuffix</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>Returns the image url of the column. If the ColumnType
                is IMAGE this property must be specfied. It contains the URL of a
                page that will serve up an image given an argument. The database
                column will contain image identifiers; this identifier will be used
                as an argument to the page, e.g. if the URL is
                http://localhost/ImageServer.aspx?, then combo will call it as
                follows http://localhost/ImageServer.aspx?Image=DataFromColumn. It
                will expect a binary image to be written out by the page. For
                example, the values in this column could be the id's of people
                stored in the database. When the combo is loaded the row value sends
                a request to the image handler, e.g. by calling
                http://localhost/ImageServer.aspx?Image=shiggens. ImageServer.aspx
                will check if shiggens is online, and, if so, send back an image
                specifying so.
            </description>
            <name>imageHandlerURL</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>Returns the color of the text in this column</description>
            <name>textColor</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>Returns the width of the column. This can be an absolute
                pixel value, e.g., 15px or a percentage of the list width, e.g., 50%.
                Wrapping is determined by the CSS class used to render the column. If
                you set this value to a px value, you should ensure that the list
                width will be big enough to fit it.
            </description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>


    <!--*************************************************************************************************************-->
    <!--                                          GRID RELATED TAGS                                                  -->
    <!--*************************************************************************************************************-->
    <!-- GRID TAG -->
    <tag>
        <description>
            <![CDATA[Initializes the component and creates all children objects of the component. This method is called implicitly when the component is attached to a DOM element in the web page. This is primarily for use by component developers.]]>
        </description>
        <name>grid</name>
        <tag-class>com.nitobi.jsf.taglib.grid.GridTag</tag-class>
        <body-content>scriptless</body-content>
        <!-- ID ATTRIBUTE -->
        <attribute>
            <description><![CDATA[The DOM and JSF id for this component.]]>
            </description>
            <name>id</name>
            <required>true</required>
            <rtexprvalue>false</rtexprvalue>
        </attribute>
        <!-- AUTOINITIALIZE ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Whether or not the component should initialize on load. The component will be rendered either way.]]>
            </description>
            <name>autoInitialize</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- GRIDLISTENER ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Enter the name of the server-side JSF listener that will manage the grid gets and saves.]]></description>
            <name>gridListener</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- COLUMNINDICATORSENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The Column Indicator property shows or hides the headers. By default it's true, so the headers are shown.]]>
            </description>
            <name>columnIndicatorsEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- TOOLBARENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The ToolbarEnabled shows or hides the Grid's tool bar for the end user. The tool bar contains buttons for standard grid operations such as: inserting rows, deleting rows, copy, paste, etc...]]>
            </description>
            <name>toolbarEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- FROZENLEFTCOLUMNCOUNT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[The number of left-most columns that will remain in placed on a horizontal scroll.]]>
            </description>
            <name>frozenLeftColumnCount</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- ROWDELETEENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The RowDeleteEnabled property enables deleting of rows so that the user can delete selected rows with the toolbar buttons or keyboard.]]>
            </description>
            <name>rowDeleteEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ROWINSERTENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The RowInsertEnabled property enables inserting of rows so that the user can insert selected rows with the toolbar buttons or keyboard.]]>
            </description>
            <name>rowInsertEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- AUTOADD ATTRIBUTE -->
        <attribute>
            <description></description>
            <name>autoAdd</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- AUTOSAVEENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Activates the auto saving feature in the grid so that data is saved automatically when the cell loses focus.]]>
            </description>
            <name>autoSaveEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ROWSPERPAGE ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Sets the number of viewable rows in the Grid pane.]]>
            </description>
            <name>rowsPerPage</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- HEIGHT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[The height of the grid in pixels]]>
            </description>
            <name>height</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- WIDTH ATTRIBUTE -->
        <attribute>
            <description><![CDATA[The width of the grid in pixels.]]>
            </description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- DATASOURCEID ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]></description>
            <name>dataSourceId</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- KEYGENERATOR ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>keyGenerator</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- GETHANDLER ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Specifies the server-side resource containing the GetHandler populating the grid. This can either be entered in two ways:
                <ul>
                    <li>Servlet: (e.g., eventsurl="eventsServlet") This option automatically looks for a servlet name as defined in the web.xml file.</li>
                    <li>Managed Bean: (e.g., eventsurl="#{mybean.mymethod}") This option requires a 'java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)' signature in your managed bean.</li>
                </ul>
                ]]>
            </description>
            <name>getHandler</name>
            <required>false</required>
            <deferred-method>
                <method-signature>java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)</method-signature>
            </deferred-method>
        </attribute>
        <!-- SAVEHANDLER ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Specifies the server-side resource containing the SaveHandler that processes the inserts, updates, and deletes. This can either be entered in two ways:
                <ul>
                    <li>Servlet: (e.g., eventsurl="eventsServlet") This option automatically looks for a servlet name as defined in the web.xml file.</li>
                    <li>Managed Bean: (e.g., eventsurl="#{mybean.mymethod}") This option requires a 'java.lang.String methodName(com.nitobi.jsf.event.NitobiSaveEvent)' signature in your managed bean.</li>
                </ul>
                ]]>
            </description>
            <name>saveHandler</name>
            <required>false</required>
            <deferred-method>
                <method-signature>java.lang.String methodName(com.nitobi.jsf.event.NitobiSaveEvent)</method-signature>
            </deferred-method>
        </attribute>
        <!-- MODE ATTRIBUTE -->
        <attribute>
            <description><![CDATA[The mode this grid will use. Current options are:
                <ul>
                    <li>standard - Ajax paging with a gethandler.</li>
                    <li>localstandard - Paging is used, but on local static data. No gethandler.</li>
                    <li>livescrolling - Ajax driven, seamless scrolling through large datasets. Retrieves blocks of data from the getHandler as the user scrolls down.</li>
                    <li>locallivescrolling - Static data only. Livescrolling is performed on static data embedded in the html declaration.</li>
                    <li>nonpaging - Ajax driven, but all the data is rendered immediately. No paging or livescrolling.</li>
                    <li>localnonpaging - Static data only. All the data is rendered immediately. No paging or livescrolling.</li>
                    <li>smartpaging - Ajax driven.</li>
                    <li>pagedlivescrolling - Allows livescrolling and paging to work together. </li>
                </ul>
            ]]>
            </description>
            <name>mode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- LIVESCROLLINGMODE ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The LiveScrollingMode specifies how the grid will attempt to determine the final row. Avalailable options: <ul><li>peek</li><li>Leap</li></ul>]]>
            </description>
            <name>liveScrollingMode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- COPYENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[CopyEnabled allows data to be copied from the grid though the toolbar button or by user pressing ctrl + c]]>
            </description>
            <name>copyEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- PASTEENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[PasteEnabled allows data to be pasted from the clipboard into the grid. Can be from another grid or spreadsheet.]]>
            </description>
            <name>pasteEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- SORTENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[SortEnabled allows sorting of the grid, the user can do this by clicking on the header of a desired column this will then sort based on that column in ascending or descending order.]]>
            </description>
            <name>sortEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- GRIDRESIZEENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[GridResizeEnabled allows resizing of the grid using the mouse. The user can drag the bottom right corner of the Grid to resize it.]]>
            </description>
            <name>gridResizeEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ROWHEIGHT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>rowHeight</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- HEADERHEIGHT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>headerHeight</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- SORTMODE ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>sortMode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- RENDERMODE ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>renderMode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ENTERTAB ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>enterTab</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ROWSELECTENABLED ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>rowSelectEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- MULTIROWSELECTENABLED ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>multiRowSelectEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ASYNCHRONOUS ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>asynchronous</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- KEYMODE ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>keyMode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONAFTERCOPYEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterCopyEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONAFTERLOADDATAPAGEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterLoadDataPageEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONAFTERLOADNEXTPAGEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterLoadNextPageEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONAFTERLOADPREVIOUSPAGEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterLoadPreviousPageEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONAFTERPASTEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterPasteEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONAFTERREFRESHEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterRefreshEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONAFTERRESIZEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterResizeEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONAFTERROWDELETEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterRowDeleteEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONAFTERROWINSERTEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterRowInsertEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONAFTERSAVEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterSaveEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONAFTERSORTEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFORECELLEDITEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeCellEditEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFORECOPYEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeCopyEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFORELOADDATAEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeLoadDataEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFORELOADNEXTPAGEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeLoadNextPageEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFORELOADPREVIOUSPAGEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeLoadPreviousPageEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFOREPASTEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforePasteEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFOREREFRESHEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeRefreshEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFORERESIZEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeResizeEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFOREROWDELETEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeRowDeleteEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFOREROWINSERTEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeRowInsertEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFORESAVEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeSaveEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONBEFORESORTEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONCELLCLICKEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onCellClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONCELLDBLCLICKEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onCellDblClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONCELLFOCUSEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onCellFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONCELLUPDATEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onCellUpdateEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONCELLVALIDATEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onCellValidateEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONCONTEXTMENUEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onContextMenuEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONDATAREADYEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onDataReadyEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONERROREVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onErrorEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONHANDLEERROREVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onHandleErrorEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONHTMLREADYEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onHtmlReadyEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONKEYDOWNEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onKeyDownEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONKEYUPEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onKeyUpEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONMOUSEMOVEEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onMouseMoveEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONMOUSEOUTEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onMouseOutEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONMOUSEOVEREVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onMouseOverEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONROWBLUREVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onRowBlurEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONROWFOCUSEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onRowFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- SCROLLX ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>scrollX</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- SCROLLY ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>scrollY</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- SHOWERRORS ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>showErrors</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- HWRAP ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>hwrap</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- VWRAP ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>vwrap</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- EDITMODE ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>editMode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- HEIGHTFIXED ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>heightFixed</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- WIDTHFIXED ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>widthFixed</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- MINHEIGHT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>minHeight</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- MINWIDTH ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>minWidth</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- ONFOCUSEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONHITROWSTARTEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onHitRowStartEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONHITROWENDEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onHitRowEndEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONKEYPRESSEDEVENT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onKeyPressedEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- THEME ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Defines the look and feel of the grid. Currently available:
            <ul>
                <li>base</li>
                <li>gloss</li>
                <li>leopard</li>
                <li>lightblue</li>
                <li>minimal</li>
                <li>minimal_bluestripes</li>
                <li>minimal_greenstripes</li>
                <li>minimal_redstripes</li>
                <li>minimal_stripes</li>
                <li>nitobi</li>
                <li>outline</li>
                <li>plastik</li>
                <li>radial</li>
                <li>radial_blue</li>
                <li>radial_orange</li>
                <li>template</li>
                <li>tiny</li>
                <li>flex</li>
                <li>tiger</li>
                <li>vista</li>
            </ul>
            ]]>
            </description>
            <name>theme</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- TOOLTIPSENABLED ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>tooltipsEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- TREE GRID TAG -->
    <tag>
        <description>
            <![CDATA[Initializes the component and creates all children objects of the component. This method is called implicitly when the component is attached to a DOM element in the web page. This is primarily for use by component developers.]]>
        </description>
        <name>treeGrid</name>
        <tag-class>com.nitobi.jsf.taglib.grid.TreeGridTag</tag-class>
        <body-content>scriptless</body-content>
        <!-- ID ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>id</name>
            <required>true</required>
            <rtexprvalue>false</rtexprvalue>
        </attribute>
        <!-- ROOTCOLUMNS ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[This is the id of the <ntb:columns> element that represents the column set of the root level of data in the Tree Grid.]]></description>
            <name>rootColumns</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- GROUPOFFSET ATTRIBUTE -->
        <attribute>
            <description><![CDATA[The amount each subgroup is offset from the left.]]></description>
            <name>groupOffset</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- AUTOINITIALIZE ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Whether or not the component should initialize on load]]>
            </description>
            <name>autoInitialize</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- COLUMNINDICATORSENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The Column Indicator property shows or hides the headers. By default it's true, so the headers are shown.]]>
            </description>
            <name>columnIndicatorsEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- TOOLBARENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The ToolbarEnabled shows or hides the Grid's tool bar for the end user. The tool bar contains buttons for standard grid operations such as: inserting rows, deleting rows, copy, paste, etc...]]>
            </description>
            <name>toolbarEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- FROZENLEFTCOLUMN ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>frozenLeftColumnCount</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- ROWDELETEENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The RowDeleteEnabled property enables deleting of rows so that the user can delete selected rows with the toolbar buttons or keyboard.]]>
            </description>
            <name>rowDeleteEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ROWINSERTENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The RowInsertEnabled property enables inserting of rows so that the user can insert selected rows with the toolbar buttons or keyboard.]]>
            </description>
            <name>rowInsertEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- AUTOADD ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>autoAdd</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- AUTOSAVEENABLED ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>autoSaveEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ROWSPERPAGE ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>rowsPerPage</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- HEIGHT ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>height</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- WIDTH ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- DATASOURCEID ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]></description>
            <name>dataSourceId</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- KEYGENERATOR ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[A unique key for new records. If a KeyGenerator is not specified, a unique numeric key will be generated by the Grid based on a random number and the system date / time]]>
            </description>
            <name>keyGenerator</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- GETHANDLER ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Specifies the server-side resource containing the GetHandler that populates the grid. This can either be entered in two ways:
                <ul>
                    <li>Servlet: (e.g., eventsurl="eventsServlet") This option automatically looks for a servlet name as defined in the web.xml file.</li>
                    <li>Managed Bean: (e.g., eventsurl="#{mybean.mymethod}") This option requires a 'java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)' signature in your managed bean.</li>
                </ul>
                ]]>
            </description>
            <name>getHandler</name>
            <required>false</required>
            <deferred-method>
                <method-signature>java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)</method-signature>
            </deferred-method>
        </attribute>
        <!-- SAVEHANDLER ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Specifies the server-side resource containing the SaveHandler that processes the inserts, updates, and deletes. This can either be entered in two ways:
                <ul>
                    <li>Servlet: (e.g., eventsurl="eventsServlet") This option automatically looks for a servlet name as defined in the web.xml file.</li>
                    <li>Managed Bean: (e.g., eventsurl="#{mybean.mymethod}") This option requires a 'java.lang.String methodName(com.nitobi.jsf.event.NitobiSaveEvent)' signature in your managed bean.</li>
                </ul>
                ]]>
            </description>
            <name>saveHandler</name>
            <required>false</required>
            <deferred-method>
                <method-signature>java.lang.String methodName(com.nitobi.jsf.event.NitobiSaveEvent)</method-signature>
            </deferred-method>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>mode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>liveScrollingMode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>copyEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>pasteEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>sortEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>gridResizeEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>rowHeight</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>headerHeight</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>sortMode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>renderMode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>enterTab</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>rowSelectEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>multiRowSelectEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>asynchronous</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>keyMode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterCopyEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterLoadDataPageEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterLoadNextPageEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterLoadPreviousPageEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterPasteEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterRefreshEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterResizeEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterRowDeleteEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterRowInsertEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterSaveEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onAfterSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeCellEditEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeCopyEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeLoadDataEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeLoadNextPageEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeLoadPreviousPageEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforePasteEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeRefreshEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeResizeEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeRowDeleteEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeRowInsertEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeSaveEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onBeforeSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onCellClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onCellDblClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onCellFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onCellUpdateEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onCellValidateEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onContextMenuEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onDataReadyEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onErrorEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onHandleErrorEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onHtmlReadyEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onKeyDownEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onKeyUpEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onMouseMoveEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onMouseOutEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onMouseOverEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onRowBlurEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onRowFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- SCROLLX ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>scrollX</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>scrollY</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>showErrors</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>hwrap</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>vwrap</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>editMode</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>heightFixed</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>widthFixed</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>minHeight</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>minWidth</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onHitRowStartEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onHitRowEndEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>onKeyPressedEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>theme</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTRIBUTE -->
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>tooltipsEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- COLUMNS TAG -->
    <tag>
        <description><![CDATA[A container tag for defining the columns in a Grid component.]]>
        </description>
        <name>columns</name>
        <tag-class>com.nitobi.jsf.taglib.grid.ColumnsTag</tag-class>
        <body-content>scriptless</body-content>
        <!-- ID ATTRIBUTE-->
        <attribute>
            <description><![CDATA[The id of this component]]></description>
            <name>id</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
        </attribute>
        <!-- GETHANDLER ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Specifies the server-side resource containing the GetHandler that populates the columns. This can either be entered in two ways:
                <ul>
                    <li>Servlet: (e.g., eventsurl="eventsServlet") This option automatically looks for a servlet name as defined in the web.xml file.</li>
                    <li>Managed Bean: (e.g., eventsurl="#{mybean.mymethod}") This option requires a 'java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)' signature in your managed bean.</li>
                </ul>
                ]]>
            </description>
            <name>getHandler</name>
            <required>false</required>
            <deferred-method>
                <method-signature>java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)</method-signature>
            </deferred-method>
        </attribute>
        <!-- SAVEHANDLER ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Specifies the server-side resource containing the SaveHandler that processes the inserts, updates, and deletes. This can either be entered in two ways:
                <ul>
                    <li>Servlet: (e.g., eventsurl="eventsServlet") This option automatically looks for a servlet name as defined in the web.xml file.</li>
                    <li>Managed Bean: (e.g., eventsurl="#{mybean.mymethod}") This option requires a 'java.lang.String methodName(com.nitobi.jsf.event.NitobiSaveEvent)' signature in your managed bean.</li>
                </ul>
                ]]>
            </description>
            <name>saveHandler</name>
            <required>false</required>
            <deferred-method>
                <method-signature>java.lang.String methodName(com.nitobi.jsf.event.NitobiSaveEvent)</method-signature>
            </deferred-method>
        </attribute>
        <!-- HEADERENABLED ATTRIBUTE-->
        <attribute>
            <description>
                <![CDATA[Whether or not the header should be enabled for this column grouping. This attribute is only meaningful inside a TreeGrid component.]]></description>
            <name>headerEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- EXPAND COLUMN TAG -->
    <tag>
        <description><![CDATA[Specifies that an <n:columns> element has a sub group of data.]]></description>
        <name>expandColumn</name>
        <tag-class>com.nitobi.jsf.taglib.grid.ExpandColumnTag</tag-class>
        <body-content>empty</body-content>
        <attribute>
            <description>
                <![CDATA[Defines the id of any subordinate columns tag that would be desplayed as a result of expanding this treegrid node.]]></description>
            <name>childColumnSet</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Defines the width in pixels.]]></description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <example>
            <![CDATA[
<ntb:columns id="orders" gethandler="load_orders.asp" savehandler="save_orders.asp" headerenabled="true">
    <ntb:expandcolumn childcolumnset="products" width="50"></ntb:expandcolumn>
    <ntb:numbercolumn label="Order ID" editable="false" xdatafld="OrderID" width="100"></ntb:numbercolumn>
    <ntb:textcolumn label="Order Date" xdatafld="OrderDate" width="140"></ntb:textcolumn>
    <ntb:textcolumn label="Shipped Date" xdatafld="ShippedDate" width="140"></ntb:textcolumn>
</ntb:columns>
<ntb:columns id="products" gethandler="load_products.asp">
    <ntb:textcolumn label="Product Name" xdatafld="ProductName" width="150"></ntb:textcolumn>
    <ntb:textcolumn label="Price" xdatafld="ProductPrice"></ntb:textcolumn>
</ntb:columns>
                    ]]>
        </example>
    </tag>
    <!-- COLUMN TAG -->
    <tag>
        <description><![CDATA[Represents a single column of data in a Grid.]]>
        </description>
        <name>column</name>
        <tag-class>com.nitobi.jsf.taglib.grid.ColumnTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description>
                <![CDATA[Specifies the alignment of the text in a Column. This attribute maps to the getAlign and setAlign functions in the Javascript API.]]>
            </description>
            <name>align</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the CSS Class name for the column. This can be used to set properties on the colum such as text alignment and colors. This attribute maps to the getClassName and setClassName functions in the Javascript API.]]>
            </description>
            <name>className</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies specific CSS styles to apply to data in the column. This can be used to set properties on the colum such as text alignment and colors. This attribute maps to the getCssStyle and setCssStyle functions in the Javascript API.]]>
            </description>
            <name>cssStyle</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies a string literal value to display in a column. If this is done the column should also be designated as editable="false" This attribute maps to the getValue and setValue functions in the Javascript API.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the field name in the nitobi.data.DataTable to which the column corresponds. This attribute maps to the getColumnName and setColumnName functions in the Javascript API.]]>
            </description>
            <name>columnName</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The HTML element of the column header. Returns the HTML element of the column header. This attribute maps to the getHeaderElement and setHeaderElement functions in the Javascript API.]]>
            </description>
            <name>headerElement</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[This attribute maps to the getType and setType functions in the Javascript API.]]>
            </description>
            <name>type</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies whether the Cells in the given Column are editable. Setting this property to true prevents users from modifying cells in this column. This attribute maps to the getEditable and setEditable functions in the Javascript API.]]>
            </description>
            <name>editable</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the initial value of the cell. This property is used when new rows are created in the Grid. This attribute maps to the getInitial and setInitial functions in the Javascript API.]]>
            </description>
            <name>initial</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the column label. This attribute maps to the getLabel and setLabel functions in the Javascript API.]]>
            </description>
            <name>label</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the direction of the sort for a given Column. This attribute maps to the getSortDirection and setSortDirection functions in the Javascript API.]]>
            </description>
            <name>sortDirection</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies if sorting is enabled on a given Column. This attribute maps to the getSortEnabled and setSortEnabled functions in the Javascript API.]]>
            </description>
            <name>sortEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the direction of the sort order for the column. This attribute maps to the getWidth and setWidth functions in the Javascript API.]]>
            </description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies whether or not the column will be displayed in the Grid. This attribute maps to the getVisible and setVisible functions in the Javascript API.]]>
            </description>
            <name>visible</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the name of the xml field to bind to. This attribute maps to the getxdatafld and setxdatafld functions in the Javascript API.]]>
            </description>
            <name>xmlDataField</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnHeaderClickEvent and setOnHeaderClickEvent functions in the Javascript API.]]>
            </description>
            <name>onHeaderClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellClickEvent and setOnCellClickEvent functions in the Javascript API.]]>
            </description>
            <name>onCellClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellValidateEvent and setOnCellValidateEvent functions in the Javascript API.]]>
            </description>
            <name>onCellValidateEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnBeforeCellEditEvent and setOnBeforeCellEditEvent functions in the Javascript API.]]>
            </description>
            <name>onBeforeCellEditEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnAfterCellEditEvent and setOnAfterCellEditEvent functions in the Javascript API. ]]>
            </description>
            <name>onAfterCellEditEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellBlurEvent and setOnCellBlurEvent functions in the Javascript API.]]>
            </description>
            <name>onCellBlurEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellFocusEvent and setOnCellFocusEvent functions in the Javascript API.]]>
            </description>
            <name>onCellFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnBeforeSortEvent and setOnBeforeSortEvent functions in the Javascript API.]]>
            </description>
            <name>onBeforeSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnAfterSortEvent and setOnAfterSortEvent functions in the Javascript API.]]>
            </description>
            <name>onAfterSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnKeyPressEvent and setOnKeyPressEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyPressEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The OnKeyDownEvent fires before the key strokes are handled the column editor. By returning false from the OnKeyDownEvent key strokes will not be registered in the cell editor. This attribute maps to the getOnKeyDownEvent and setOnKeyDownEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyDownEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnKeyUpEvent and setOnKeyUpEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyUpEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnChangeEvent and setOnChangeEvent functions in the Javascript API.]]>
            </description>
            <name>onChangeEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- DATE COLUMN TAG -->
    <tag>
        <description>Designates this column as a date column.</description>
        <name>dateColumn</name>
        <tag-class>com.nitobi.jsf.taglib.grid.DateColumnTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description><![CDATA[]]>
            </description>
            <name>mask</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the alignment of the text in a Column. This attribute maps to the getAlign and setAlign functions in the Javascript API.]]>
            </description>
            <name>align</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the CSS Class name for the column. This can be used to set properties on the colum such as text alignment and colors. This attribute maps to the getClassName and setClassName functions in the Javascript API.]]>
            </description>
            <name>className</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies specific CSS styles to apply to data in the column. This can be used to set properties on the colum such as text alignment and colors. This attribute maps to the getCssStyle and setCssStyle functions in the Javascript API.]]>
            </description>
            <name>cssStyle</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies a string literal value to display in a column. If this is done the column should also be designated as editable="false" This attribute maps to the getValue and setValue functions in the Javascript API.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the field name in the nitobi.data.DataTable to which the column corresponds. This attribute maps to the getColumnName and setColumnName functions in the Javascript API.]]>
            </description>
            <name>columnName</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The HTML element of the column header. Returns the HTML element of the column header. This attribute maps to the getHeaderElement and setHeaderElement functions in the Javascript API.]]>
            </description>
            <name>headerElement</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[This attribute maps to the getType and setType functions in the Javascript API.]]>
            </description>
            <name>type</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies whether the Cells in the given Column are editable. Setting this property to true prevents users from modifying cells in this column. This attribute maps to the getEditable and setEditable functions in the Javascript API.]]>
            </description>
            <name>editable</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the initial value of the cell. This property is used when new rows are created in the Grid. This attribute maps to the getInitial and setInitial functions in the Javascript API.]]>
            </description>
            <name>initial</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the column label. This attribute maps to the getLabel and setLabel functions in the Javascript API.]]>
            </description>
            <name>label</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the direction of the sort for a given Column. This attribute maps to the getSortDirection and setSortDirection functions in the Javascript API.]]>
            </description>
            <name>sortDirection</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies if sorting is enabled on a given Column. This attribute maps to the getSortEnabled and setSortEnabled functions in the Javascript API.]]>
            </description>
            <name>sortEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the direction of the sort order for the column. This attribute maps to the getWidth and setWidth functions in the Javascript API.]]>
            </description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies whether or not the column will be displayed in the Grid. This attribute maps to the getVisible and setVisible functions in the Javascript API.]]>
            </description>
            <name>visible</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the name of the xml field to bind to. This attribute maps to the getxdatafld and setxdatafld functions in the Javascript API.]]>
            </description>
            <name>xmlDataField</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnHeaderClickEvent and setOnHeaderClickEvent functions in the Javascript API.]]>
            </description>
            <name>onHeaderClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellClickEvent and setOnCellClickEvent functions in the Javascript API.]]>
            </description>
            <name>onCellClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellValidateEvent and setOnCellValidateEvent functions in the Javascript API.]]>
            </description>
            <name>onCellValidateEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnBeforeCellEditEvent and setOnBeforeCellEditEvent functions in the Javascript API.]]>
            </description>
            <name>onBeforeCellEditEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnAfterCellEditEvent and setOnAfterCellEditEvent functions in the Javascript API. ]]>
            </description>
            <name>onAfterCellEditEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellBlurEvent and setOnCellBlurEvent functions in the Javascript API.]]>
            </description>
            <name>onCellBlurEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellFocusEvent and setOnCellFocusEvent functions in the Javascript API.]]>
            </description>
            <name>onCellFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnBeforeSortEvent and setOnBeforeSortEvent functions in the Javascript API.]]>
            </description>
            <name>onBeforeSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnAfterSortEvent and setOnAfterSortEvent functions in the Javascript API.]]>
            </description>
            <name>onAfterSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnKeyPressEvent and setOnKeyPressEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyPressEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The OnKeyDownEvent fires before the key strokes are handled the column editor. By returning false from the OnKeyDownEvent key strokes will not be registered in the cell editor. This attribute maps to the getOnKeyDownEvent and setOnKeyDownEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyDownEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnKeyUpEvent and setOnKeyUpEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyUpEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnChangeEvent and setOnChangeEvent functions in the Javascript API.]]>
            </description>
            <name>onChangeEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- NUMBER COLUMN TAG -->
    <tag>
        <description>Defines a column containing number types.</description>
        <name>numberColumn</name>
        <tag-class>com.nitobi.jsf.taglib.grid.NumberColumnTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description><![CDATA[The label that will show at the top of the column.]]></description>
            <name>label</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The width setting for this column.]]></description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Specifies the mask used to display values in a Number cell.]]>
            </description>
            <name>mask</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Specifies the character used for separating groupings in numbers.]]>
            </description>
            <name>groupingSeparator</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the character used to separate the integral and fractional parts of a decimal number.]]>
            </description>
            <name>decimalSeparator</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Specifies the mask used to display negative values in a Number cell.]]>
            </description>
            <name>negativeMask</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the alignment of the text in a Column. This attribute maps to the getAlign and setAlign functions in the Javascript API.]]>
            </description>
            <name>align</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the CSS Class name for the column. This can be used to set properties on the colum such as text alignment and colors. This attribute maps to the getClassName and setClassName functions in the Javascript API.]]>
            </description>
            <name>className</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies specific CSS styles to apply to data in the column. This can be used to set properties on the colum such as text alignment and colors. This attribute maps to the getCssStyle and setCssStyle functions in the Javascript API.]]>
            </description>
            <name>cssStyle</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies a string literal value to display in a column. If this is done the column should also be designated as editable="false" This attribute maps to the getValue and setValue functions in the Javascript API.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the field name in the nitobi.data.DataTable to which the column corresponds. This attribute maps to the getColumnName and setColumnName functions in the Javascript API.]]>
            </description>
            <name>columnName</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The HTML element of the column header. Returns the HTML element of the column header. This attribute maps to the getHeaderElement and setHeaderElement functions in the Javascript API.]]>
            </description>
            <name>headerElement</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[This attribute maps to the getType and setType functions in the Javascript API.]]>
            </description>
            <name>type</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies whether the Cells in the given Column are editable. Setting this property to true prevents users from modifying cells in this column. This attribute maps to the getEditable and setEditable functions in the Javascript API.]]>
            </description>
            <name>editable</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the initial value of the cell. This property is used when new rows are created in the Grid. This attribute maps to the getInitial and setInitial functions in the Javascript API.]]>
            </description>
            <name>initial</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the column label. This attribute maps to the getLabel and setLabel functions in the Javascript API.]]>
            </description>
            <name>label</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the direction of the sort for a given Column. This attribute maps to the getSortDirection and setSortDirection functions in the Javascript API.]]>
            </description>
            <name>sortDirection</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies if sorting is enabled on a given Column. This attribute maps to the getSortEnabled and setSortEnabled functions in the Javascript API.]]>
            </description>
            <name>sortEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the direction of the sort order for the column. This attribute maps to the getWidth and setWidth functions in the Javascript API.]]>
            </description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies whether or not the column will be displayed in the Grid. This attribute maps to the getVisible and setVisible functions in the Javascript API.]]>
            </description>
            <name>visible</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the name of the xml field to bind to. This attribute maps to the getxdatafld and setxdatafld functions in the Javascript API.]]>
            </description>
            <name>xmlDataField</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnHeaderClickEvent and setOnHeaderClickEvent functions in the Javascript API.]]>
            </description>
            <name>onHeaderClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellClickEvent and setOnCellClickEvent functions in the Javascript API.]]>
            </description>
            <name>onCellClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellValidateEvent and setOnCellValidateEvent functions in the Javascript API.]]>
            </description>
            <name>onCellValidateEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnBeforeCellEditEvent and setOnBeforeCellEditEvent functions in the Javascript API.]]>
            </description>
            <name>onBeforeCellEditEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnAfterCellEditEvent and setOnAfterCellEditEvent functions in the Javascript API. ]]>
            </description>
            <name>onAfterCellEditEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellBlurEvent and setOnCellBlurEvent functions in the Javascript API.]]>
            </description>
            <name>onCellBlurEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellFocusEvent and setOnCellFocusEvent functions in the Javascript API.]]>
            </description>
            <name>onCellFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnBeforeSortEvent and setOnBeforeSortEvent functions in the Javascript API.]]>
            </description>
            <name>onBeforeSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnAfterSortEvent and setOnAfterSortEvent functions in the Javascript API.]]>
            </description>
            <name>onAfterSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnKeyPressEvent and setOnKeyPressEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyPressEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The OnKeyDownEvent fires before the key strokes are handled the column editor. By returning false from the OnKeyDownEvent key strokes will not be registered in the cell editor. This attribute maps to the getOnKeyDownEvent and setOnKeyDownEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyDownEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnKeyUpEvent and setOnKeyUpEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyUpEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnChangeEvent and setOnChangeEvent functions in the Javascript API.]]>
            </description>
            <name>onChangeEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- TEXT COLUMN TAG -->
    <tag>
        <description>The TextColumn represents a column of data that is general text.</description>
        <name>textColumn</name>
        <tag-class>com.nitobi.jsf.taglib.grid.TextColumnTag</tag-class>
        <body-content>scriptless</body-content>

        <attribute>
            <description>
                <![CDATA[Specifies the alignment of the text in a Column. This attribute maps to the getAlign and setAlign functions in the Javascript API.]]>
            </description>
            <name>align</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the CSS Class name for the column. This can be used to set properties on the colum such as text alignment and colors. This attribute maps to the getClassName and setClassName functions in the Javascript API.]]>
            </description>
            <name>className</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies specific CSS styles to apply to data in the column. This can be used to set properties on the colum such as text alignment and colors. This attribute maps to the getCssStyle and setCssStyle functions in the Javascript API.]]>
            </description>
            <name>cssStyle</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies a string literal value to display in a column. If this is done the column should also be designated as editable="false" This attribute maps to the getValue and setValue functions in the Javascript API.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the field name in the nitobi.data.DataTable to which the column corresponds. This attribute maps to the getColumnName and setColumnName functions in the Javascript API.]]>
            </description>
            <name>columnName</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The HTML element of the column header. Returns the HTML element of the column header. This attribute maps to the getHeaderElement and setHeaderElement functions in the Javascript API.]]>
            </description>
            <name>headerElement</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[This attribute maps to the getType and setType functions in the Javascript API.]]>
            </description>
            <name>type</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies whether the Cells in the given Column are editable. Setting this property to true prevents users from modifying cells in this column. This attribute maps to the getEditable and setEditable functions in the Javascript API.]]>
            </description>
            <name>editable</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the initial value of the cell. This property is used when new rows are created in the Grid. This attribute maps to the getInitial and setInitial functions in the Javascript API.]]>
            </description>
            <name>initial</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the column label. This attribute maps to the getLabel and setLabel functions in the Javascript API.]]>
            </description>
            <name>label</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the direction of the sort for a given Column. This attribute maps to the getSortDirection and setSortDirection functions in the Javascript API.]]>
            </description>
            <name>sortDirection</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies if sorting is enabled on a given Column. This attribute maps to the getSortEnabled and setSortEnabled functions in the Javascript API.]]>
            </description>
            <name>sortEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the direction of the sort order for the column. This attribute maps to the getWidth and setWidth functions in the Javascript API.]]>
            </description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies whether or not the column will be displayed in the Grid. This attribute maps to the getVisible and setVisible functions in the Javascript API.]]>
            </description>
            <name>visible</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the name of the xml field to bind to. This attribute maps to the getxdatafld and setxdatafld functions in the Javascript API.]]>
            </description>
            <name>xmlDataField</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnHeaderClickEvent and setOnHeaderClickEvent functions in the Javascript API.]]>
            </description>
            <name>onHeaderClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellClickEvent and setOnCellClickEvent functions in the Javascript API.]]>
            </description>
            <name>onCellClickEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellValidateEvent and setOnCellValidateEvent functions in the Javascript API.]]>
            </description>
            <name>onCellValidateEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnBeforeCellEditEvent and setOnBeforeCellEditEvent functions in the Javascript API.]]>
            </description>
            <name>onBeforeCellEditEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnAfterCellEditEvent and setOnAfterCellEditEvent functions in the Javascript API. ]]>
            </description>
            <name>onAfterCellEditEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellBlurEvent and setOnCellBlurEvent functions in the Javascript API.]]>
            </description>
            <name>onCellBlurEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnCellFocusEvent and setOnCellFocusEvent functions in the Javascript API.]]>
            </description>
            <name>onCellFocusEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnBeforeSortEvent and setOnBeforeSortEvent functions in the Javascript API.]]>
            </description>
            <name>onBeforeSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnAfterSortEvent and setOnAfterSortEvent functions in the Javascript API.]]>
            </description>
            <name>onAfterSortEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnKeyPressEvent and setOnKeyPressEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyPressEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The OnKeyDownEvent fires before the key strokes are handled the column editor. By returning false from the OnKeyDownEvent key strokes will not be registered in the cell editor. This attribute maps to the getOnKeyDownEvent and setOnKeyDownEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyDownEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnKeyUpEvent and setOnKeyUpEvent functions in the Javascript API.]]>
            </description>
            <name>onKeyUpEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getOnChangeEvent and setOnChangeEvent functions in the Javascript API.]]>
            </description>
            <name>onChangeEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- CHECKBOX EDITOR TAG -->
    <tag>
        <description>Designates a column in the grid for HTML checkboxes.</description>
        <name>checkBoxEditor</name>
        <tag-class>com.nitobi.jsf.taglib.grid.CheckboxEditorTag</tag-class>
        <body-content>empty</body-content>
        <attribute>
            <description>
                <![CDATA[The value in the data that represents a true or checked state. This attribute maps to the getCheckedValue and setCheckedValue functions in the Javascript API. ]]>
            </description>
            <name>checkedValue</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The value in the data that represents a false or unchecked state. This attribute maps to the getUnCheckedValue and setUnCheckedValue functions in the Javascript API.]]>
            </description>
            <name>uncheckedValue</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This is the underlying datasource for this component. Example: [{value:'yes',display:'Yes!'},{value:'no',display:'No'}]]]></description>
            <name>dataSource</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Determines what fields in the datasource represents what needs to be displayed.]]></description>
            <name>displayFields</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Determines which values in the datasource to evaluate.]]></description>
            <name>valueField</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <example><![CDATA[
<n:textcolumn	label="Checkbox" xdatafld="BulkAction" sortenabled="false" width="75">
    <n:checkboxeditor dataSource="[{value:'yes',display:'Yes!'},{value:'no',display:'No'}]" checkedValue="yes" uncheckedValue="no" displayFields="display" valueField="value"/>
</n:textcolumn>
                ]]>
        </example>
    </tag>
    <!-- IMAGE EDITOR TAG -->
    <tag>
        <description>Allows you to include images in the grid.</description>
        <name>imageEditor</name>
        <tag-class>com.nitobi.jsf.taglib.grid.ImageEditorTag</tag-class>
        <body-content>empty</body-content>
        <attribute>
            <description>
                <![CDATA[If an image in a Column is not bound to a datasource field, for example, when an image is used for a "delete" button, the ImageUrl can be used to specify a static url for an image to display.]]>
            </description>
            <name>imageUrl</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <example>
            <![CDATA[
<n:textcolumn label="Image" xdatafld="ProductIcon" sortenabled="false" width="75" initial="docicon.gif">
    <n:imageeditor/>
</n:textcolumn>
                    ]]>
        </example>
    </tag>
    <!-- LINK EDITOR TAG -->
    <tag>
        <description>Allows you to dedicate a column for use with links.</description>
        <name>linkEditor</name>
        <tag-class>com.nitobi.jsf.taglib.grid.LinkEditorTag</tag-class>
        <body-content>empty</body-content>
        <attribute>
            <description><![CDATA[Whether or not to open link in a new window.]]>
            </description>
            <name>openWindow</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- LISTBOX EDITOR TAG -->
    <tag>
        <description>Designate a column for a listbox.</description>
        <name>listboxEditor</name>
        <tag-class>com.nitobi.jsf.taglib.grid.ListboxEditorTag</tag-class>
        <body-content>empty</body-content>
        <example>
            <![CDATA[
<ntb:textcolumn	label="Listbox"	xdatafld="ProductCategoryName" width="150">
    <ntb:listboxeditor  gethandler="lookuphandler.asp" displayfields="ProductCategoryName" valuefield="ProductCategoryName" ></ntb:listboxeditor>
</ntb:textcolumn>
              ]]>
        </example>
    </tag>
    <!-- LOOKUP EDITOR TAG -->
    <tag>
        <description>Designate a column for a lookup component.</description>
        <name>lookupEditor</name>
        <tag-class>com.nitobi.jsf.taglib.grid.LookupEditorTag</tag-class>
        <body-content>empty</body-content>
        <attribute>
            <description>
                <![CDATA[Specifies the amount of time that should pass before data is requested from the server in response to a users keystroke. This attribute maps to the getDelay and setDelay functions in the Javascript API.]]>
            </description>
            <name>delay</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, the value entered into the Lookup needs to be a valid value from the list. This attribute maps to the getForceValidOption and setForceValidOption functions in the Javascript API.]]>
            </description>
            <name>forceValidOption</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Points to a local datasource]]></description>
            <name>dataSourceId</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[the actual DataTable object that results from either the gethandler or datasourceid]]></description>
            <name>getHandler</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Designates which of the resulting fields from the datasource Id or gethandler to show.]]></description>
            <name>displayFields</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Designates which field will show when choice is selected.]]></description>
            <name>valueField</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <example>
            <![CDATA[
<n:textcolumn label="Listbox" xmlDataField="ProductCategoryName" width="150">
    <n:listboxeditor getHandler="lookuphandler.asp" displayFields="ProductCategoryName" valueField="ProductCategoryName" />
</n:textcolumn>
                    ]]>
        </example>
    </tag>
    <!-- NUMBER EDITOR TAG -->
    <tag>
        <description>
            <![CDATA[Represents the text input area for editing numeric data.Represents the text input area for editing numeric data.]]>
        </description>
        <name>numberEditor</name>
        <tag-class>com.nitobi.jsf.taglib.grid.NumberEditorTag</tag-class>
        <body-content>empty</body-content>
        <attribute>
            <description><![CDATA[No documentation]]></description>
            <name>number</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Double</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The mask that maintains a given format]]></description>
            <name>mask</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[What character separates a group. Typically this is a comma in America and a period in Europe.]]></description>
            <name>group</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[What character separates the whole numbers from the decimal numbers.]]></description>
            <name>decimal</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>


    </tag>
    <!-- PASSWORD EDITOR TAG -->
    <tag>
        <description>
            <![CDATA[The Password control allows users to edit data without the data being displayed on the screen.The Password control allows users to edit data without the data being displayed on the screen.Represents the text input area for editing text data.Represents the text input area for editing text data.]]>
        </description>
        <name>passwordEditor</name>
        <tag-class>com.nitobi.jsf.taglib.grid.PasswordEditorTag</tag-class>
        <body-content>empty</body-content>
    </tag>
    <!-- TEXT EDITOR TAG -->
    <tag>
        <description>Creates a text type form input in a grid.</description>
        <name>textEditor</name>
        <tag-class>com.nitobi.jsf.taglib.grid.TextEditorTag</tag-class>
        <body-content>empty</body-content>
        <attribute>
            <description>
                <![CDATA[The maximum number of allowed characters. Default max length is 255 characters.]]></description>
            <name>maxLength</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Event fired when you press down on a key.]]></description>
            <name>onKeyDownEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Event fired when you let up on a key.]]></description>
            <name>onKeyUpEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Event fired when you press or hold down a key.]]></description>
            <name>onKeyPressEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Event fired when the value of the field is changed.]]></description>
            <name>onChangeEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- TEXTAREA EDITOR TAG -->
    <tag>
        <description><![CDATA[On clicking a cell in this column, a textarea will appear.]]></description>
        <name>textareaEditor</name>
        <tag-class>com.nitobi.jsf.taglib.grid.TextareaEditorTag</tag-class>
        <body-content>empty</body-content>
        <attribute>
            <description>
                <![CDATA[The maximum number of allowed characters. Default max length is 255 characters.]]></description>
            <name>maxLength</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Event fired when you press down on a key.]]></description>
            <name>onKeyDownEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Event fired when you let up on a key.]]></description>
            <name>onKeyUpEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Event fired when you press or hold down a key.]]></description>
            <name>onKeyPressEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Event fired when the value of the field is changed.]]></description>
            <name>onChangeEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>


    </tag>
    <!-- DATASOURCES TAG -->
    <tag>
        <description><![CDATA[A container element to hold all the XML DataSources that a Grid will use.]]>
        </description>
        <name>dataSources</name>
        <tag-class>com.nitobi.jsf.taglib.grid.DataSourcesTag</tag-class>
        <body-content>scriptless</body-content>
    </tag>
    <!-- DATASOURCE TAG -->
    <tag>
        <description>
            <![CDATA[The  element is used to declaratively specify an XML datasource that is formatted in the Nitobi XML format.]]>
        </description>
        <name>dataSource</name>
        <tag-class>com.nitobi.jsf.taglib.grid.DataSourceTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description>
                <![CDATA[Returns the id of the datepicker on the HTML page. This id must be unique. You can use this Id to get a reference to the datepicker on the page. ]]>
            </description>
            <name>id</name>
            <required>true</required>
            <rtexprvalue>false</rtexprvalue>
        </attribute>
    </tag>
    <!-- DATA TAG -->
    <tag>
        <description>
            <![CDATA[The data element is used to declaratively specify an XML datasource that is formatted in the Nitobi XML format.]]>
        </description>
        <name>data</name>
        <tag-class>com.nitobi.jsf.taglib.grid.DataTag</tag-class>
        <body-content>scriptless</body-content>
    </tag>
    <!-- DATASOURCE STRUCTURE TAG -->
    <tag>
        <description><![CDATA[]]>
        </description>
        <name>dataSourceStructure</name>
        <tag-class>com.nitobi.jsf.taglib.grid.DataSourceStructureTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description>
                <![CDATA[A bar ("|") separated list of field names. The index that the field name appears at in the bar separated list corresponds to that alphabetic attribute name starting at "a". ie in the FieldNames string "Name|Email" the Name field corresponds to the "a" attribute and the Email field corresponds to the "b" attribute.]]>
            </description>
            <name>fieldNames</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A bar ("|") separated list of keys for the DataField. The values must correspond to field names as specfied by the FieldNames property.]]>
            </description>
            <name>keys</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- E TAG -->
    <tag>
        <description>
            <![CDATA[The records in DataTable are in the format where the attributes correspond to the alphanumeric value of the index in the FieldNames array of the DataSourceStructure. This "Nitobi XML" format drastically reduces the amount of data being sent from the server to the client.]]>
        </description>
        <name>e</name>
        <tag-class>com.nitobi.jsf.taglib.grid.ElementTag</tag-class>
        <body-content>scriptless</body-content>

        <attribute>
            <description><![CDATA[The actual data that resides inside the e tag.]]>
            </description>
            <name>data</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>


    <!--*************************************************************************************************************-->
    <!--                                          CALENDAR RELATED TAGS                                              -->
    <!--*************************************************************************************************************-->
    <!-- DATE PICKER TAG -->
    <tag>
        <description>Placing this tag in your HTML will display a DatePicker component in your web page. This component
            has the ability to bind to a servlet or managed bean on the back end, defining events by means of the
            GetHandler class.
        </description>
        <name>datePicker</name>
        <tag-class>com.nitobi.jsf.taglib.calendar.DatePickerTag</tag-class>
        <body-content>scriptless</body-content>

        <!-- ID -->
        <attribute>
            <description>
                <![CDATA[Returns the id of the datepicker on the HTML page. This id must be unique. You can use this Id to get a reference to the datepicker on the page. ]]></description>
            <name>id</name>
            <required>true</required>
            <rtexprvalue>false</rtexprvalue>
        </attribute>

        <!-- VALUE -->
        <attribute>
            <description>
                <![CDATA[This is the JSF-only value attribute that can be used with a value expression to tie the components value with a managed bean. NOTE: If you have this value set in your bean or in a string on the page, it will override whatever is in the selectdate attribute. When this component is in a form, it is this value that will be saved.]]></description>
            <name>value</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Object</type>
            </deferred-value>
        </attribute>

        <!-- AUTOINITIALIZE ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Whether or not the component should initialize on load]]></description>
            <name>autoInitialize</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>

        <!-- THEME ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Defines the look and feel of the calendar components. The current options are:
                <ul>
                    <li>base</li>
                    <li>flex</li>
                    <li>gloss</li>
                    <li>leopard</li>
                    <li>minimal</li>
                    <li>minimal_bluestripes</li>
                    <li>minimal_greenstripes</li>
                    <li>minimal_redstripes</li>
                    <li>minimal_stripes</li>
                    <li>outline</li>
                    <li>radial</li>
                    <li>radial_blue</li>
                    <li>radial_orange</li>
                    <li>template</li>
                    <li>vista</li>
                </ul>
                ]]>
            </description>
            <name>theme</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- MINDATE ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The earliest selectable date.  Will accept some natural language dates: <ul><li>today</li><li>yesterday</li><li>tomorrow</li><li>lastyear</li><li>lastmonth</li><li>nextyear</li><li>nextmonth</ul>)]]></description>
            <name>minDate</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- MAXDATE ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The earliest selectable date.  Will accept some natural language dates: <ul><li>today</li><li>yesterday</li><li>tomorrow</li><li>lastyear</li><li>lastmonth</li><li>nextyear</li><li>nextmonth</li></ul>]]></description>
            <name>maxDate</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- SELECTEDDATE ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The date to be selected when the datepicker loads, as long as the value attribute does not populate it first. Whereas the value attribute ties the field to a managed bean and the JSF lifecycle after a form submit, the selecteddate attribute gives a natural way of setting a default date. Will accept some natural language dates: <ul><li>today</li><li>yesterday</li><li>tomorrow</li><li>lastyear</li><li>lastmonth</li><li>nextyear</li><li>nextmonth</li></ul>]]></description>
            <name>selectedDate</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- SUBMITMASK ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[There is a hidden input that can be used when submitting the date information in a form. Use the submitmask attribute to format the date value in that hidden input. <br/>Example date making for January 1, 2008:<br/>Here are the date masking tokens available:<br/>'y' or 'yyyy': e.g. 2008<br/>'yy': e.g. 08<br/><br/>'M':  1<br/>'MM': 01<br/>'MMM': January<br/>'NNN': Jan<br/><br/>'d': 1<br/>'dd': 01<br/><br/>'E': Tue<br/>'EE': Tuesday<br/>]]></description>
            <name>submitMask</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- LONGMONTHNAMES ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[An array literal or reference to an array that defines the full month names.]]></description>
            <name>longMonthNames</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- SHORTMONTHNAMES ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[An array or reference to an array that defines the short month names, (e.g. Jan, Feb, etc.)]]></description>
            <name>shortMonthNames</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- LONGDAYNAMES ATTRIBUTE -->
        <attribute>
            <description><![CDATA[An array or reference to an array that defines the full day names.]]></description>
            <name>longDayNames</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- SHORTDAYNAMES ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[An array or reference to an array that defines the short day names (e.g. Mon, Tue, Wed)]]></description>
            <name>shortDayNames</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- MINDAYNAMES ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[An array or reference to an array that defines the minimum day names (used in day name row in the rendered calendar, e.g. S, M, T, W, T, F, S)]]></description>
            <name>minDayNames</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- EVENTSURL ATTRIBUTE -->
        <attribute>
            <description><![CDATA[
            Specifies the server-side resource containing the GetHandler that defines special dates with event information and disabled dates. This can either be entered in two ways:
            <ul>
                <li>String (e.g., eventsurl="eventsServlet"). This option automatically looks for a servlet name as defined in the web.xml file.</li>
                <li>MethodExpression (e.g., eventsurl="#{mybean.mymethod}"). This option requires a 'java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)' signature in your managed bean.</li>
            </ul>
            ]]>
            </description>
            <name>eventsUrl</name>
            <required>false</required>
            <deferred-method>
                <method-signature>java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)</method-signature>
            </deferred-method>
        </attribute>

        <!-- ONSELECTINVALIDDATE ATTRIBUTE -->
        <attribute>
            <description>Fired when the date to be selected is of invalid format.</description>
            <name>onSetInvalidDate</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- ONSELECTOUTOFRANGE ATTRIBUTE -->
        <attribute>
            <description>Fired when the date to be selected falls outside the range defined by mindate and maxdate.
            </description>
            <name>onSetOutOfRangeDate</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- ONSETDISABLEDDATE ATTRRIBUTE -->
        <attribute>
            <description>Fired when a date defined to be disabled is selected.</description>
            <name>onSetDisabledDate</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- ONDATESELECTED ATTRIBUTE -->
        <attribute>
            <description>Fired when a valid date is to be selected.</description>
            <name>onDateSelected</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- NAVCONFIRM TEXT -->
        <attribute>
            <description><![CDATA[The text for the quick nav confirm button.]]></description>
            <name>navConfirmText</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- NAVCANCEL TEXT -->
        <attribute>
            <description><![CDATA[The text for the quick nav cancel button.]]></description>
            <name>navCancelText</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- NAVOUTOFRANGETEXT TEXT -->
        <attribute>
            <description>
                <![CDATA[The text for the quick nav error message when the chosen date is out of range as defined by mindate and maxdate.]]></description>
            <name>navOutOfRangeText</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- NAVINVALIDYEARTEXT -->
        <attribute>
            <description><![CDATA[The text for the quick nav error message when the year is invalid.]]></description>
            <name>navInvalidYearText</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- SHIMENABLED BUTTON -->
        <attribute>
            <description>
                <![CDATA[Determines whether or not to render an iframe that allows the calendar to render over top certain elements with scroll bars (textareas in Firefox 2 on Mac (only on Mac) and select boxes in IE6).  Its false by default.  If true, it will only enable the shim when needed (that is, in the browsers listed above).]]></description>
            <name>shimEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>

        <!-- ONEVENTDATESELECTED -->
        <attribute>
            <description><![CDATA[Fired if the date selected has event information associated with it.]]></description>
            <name>onEventDateSelected</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>


        <example>
            <![CDATA[
<n:datepicker id="mydatepicker" theme="flex">
    <n:dateinput/>
    <n:calendar/>
</n:datepicker>
]]>
        </example>
    </tag>
    <!-- DATEINPUT TAG -->
    <tag>
        <description><![CDATA[The input field to be used with this calendar group.]]></description>
        <name>dateInput</name>
        <tag-class>com.nitobi.jsf.taglib.calendar.DateInputTag</tag-class>
        <body-content>empty</body-content>

        <!-- WIDTH -->
        <attribute>
            <description><![CDATA[The width of the input in px.]]></description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>

        <!-- EDITABLE -->
        <attribute>
            <description><![CDATA[true to make the input editable, false to disable.  True by default.]]></description>
            <name>editable</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>

        <!-- DISPLAYMASK ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The mask used on the input field. <br/>Example date making for January 1, 2008:<br/>Here are the date masking tokens available:<br/>'y' or 'yyyy': e.g. 2008<br/>'yy': e.g. 08<br/><br/>'M':  1<br/>'MM': 01<br/>'MMM': January<br/>'NNN': Jan<br/><br/>'d': 1<br/>'dd': 01<br/><br/>'E': Tue<br/>'EE': Tuesday<br/>]]></description>
            <name>displayMask</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- EDITMASK ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[An optional mask that is applied when the input field is focused, making date entry easier. <br/>Example date making for January 1, 2008:<br/>Here are the date masking tokens available:<br/>'y' or 'yyyy': e.g. 2008<br/>'yy': e.g. 08<br/><br/>'M':  1<br/>'MM': 01<br/>'MMM': January<br/>'NNN': Jan<br/><br/>'d': 1<br/>'dd': 01<br/><br/>'E': Tue<br/>'EE': Tuesday<br/>]]></description>
            <name>editMask</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- ONBLUR ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Fired when the input is blurred.]]></description>
            <name>onBlur</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <!-- ONFOCUS ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Fired when the input is focused.]]></description>
            <name>onFocus</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- CALENDAR TAG -->
    <tag>
        <description><![CDATA[Outputs the actual Nitboi Calendar object.]]></description>
        <name>calendar</name>
        <tag-class>com.nitobi.jsf.taglib.calendar.CalendarTag</tag-class>
        <body-content>empty</body-content>

        <!-- MONTHCOLUMNS ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Together with the monthrows attribute, defines the number of calendars to render.]]></description>
            <name>monthColumns</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- MONTHROWS ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Together with the monthcolumns attribute, defines the number of calendars to render.]]></description>
            <name>monthRows</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- EFFECTENABLED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Enables or disables the effect used when the calendar's visibility is toggled.]]></description>
            <name>effectEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- ONHIDE ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Fired when the calendar is set to hidden.]]></description>
            <name>onHide</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONSHOW ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Fired when the calendar is set to visible.]]></description>
            <name>onShow</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONDATECLICKED ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Fired when a date is clicked on the calendar.]]></description>
            <name>onDateClicked</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONMONTHCHANGED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Fired when the month is changed by clicking the next/previous buttons or via the quick nav panel.]]></description>
            <name>onMonthChanged</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONYEARCHANGED ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Fired when the month is changed by clicking the next/previous buttons or via the quick nav panel.]]></description>
            <name>onYearChanged</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

    </tag>


    <!--*************************************************************************************************************-->
    <!--                                          TREE RELATED TAGS                                                  -->
    <!--*************************************************************************************************************-->
    <!-- TREE TAG -->
    <tag>
        <description>
            <![CDATA[A dynamic tree component with Ajax drill-down, unbound mode, client-side statefulness, skinnability, and data-driven sidebar.]]></description>
        <name>tree</name>
        <tag-class>com.nitobi.jsf.taglib.tree.TreeTag</tag-class>
        <body-content>scriptless</body-content>

        <attribute>
            <description>
                <![CDATA[The DOM id and JSF client id of this componenent. This must be unique within the view.]]>
            </description>
            <name>id</name>
            <required>true</required>
            <rtexprvalue>false</rtexprvalue>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies the server-side resource containing the GetHandler populating the tree. This can either be entered in two ways:
                <ul>
                    <li>Servlet: (e.g., eventsurl="eventsServlet") This option automatically looks for a servlet name as defined in the web.xml file.</li>
                    <li>Managed Bean: (e.g., eventsurl="#{mybean.mymethod}") This option requires a 'java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)' signature in your managed bean.</li>
                </ul>
                ]]>
            </description>
            <name>getHandler</name>
            <required>false</required>
            <deferred-method>
                <method-signature>java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)</method-signature>
            </deferred-method>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Sets the theme class of the tree. Note: Remember to include the CSS file for this class in your page.
                This attribute maps to the getCssClass and setCssClass functions in the Javascript API. The current options are:
                <ul>
                    <li>documents</li>
                    <li>finefolders</li>
                    <li>folders</li>
                </ul>

                ]]>
            </description>
            <name>cssClass</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Returns true if a special root style is applied to the root nodes. This attribute maps to the getRootEnabled and setRootEnabled functions in the Javascript API.]]></description>
            <name>rootEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Returns whether or not a hover class is added to nodes when they are hovered over. This attribute maps to the getHoverHighlight and setHoverHighlight functions in the Javascript API.]]></description>
            <name>hoverHighlight</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[	Sets the id of the target frame. When a frame target is set, the tree subscribes a function to its own onSelect event. The function changes the source of the frame to the URL specified by the selected node's url attribute. This attribute maps to the getTargetFrame and setTargetFrame functions in the Javascript API.]]></description>
            <name>targetFrame</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[An initial style string to use for the component. Should you wish to change the style of the component at run-time, see the setStyle() method.]]></description>
            <name>cssStyle</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the look and feel of the tree components. The current options are:
                <ul>
                    <li>base</li>
                    <li>documents</li>
                    <li>finefolders</li>
                    <li>flex</li>
                    <li>folders</li>
                    <li>pixel</li>
                    <li>tiger</li>
                    <li>vista</li>
                </ul>
                ]]>
            </description>
            <name>theme</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The default expansion for nodes in this tree. If set to true, every node in the tree will be expanded to show its children. If set to false, every node will be collapsed. Individual nodes can override this property by setting their own expanded attributes.]]></description>
            <name>expanded</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This will set the effect family used to expand and collapse nodes in the tree. See the documentation for nitobi.effects.families. Currently the following effects are available:
                <ul>
                    <li>blind</li>
                    <li>shade</li>
                    <li>none</li>
                </ul>
                ]]>
            </description>
            <name>effect</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fires when any node in the tree is clicked on. The clickable area includes the icon and the label of the node. {@link nitobi.ui.EventNotificationEventArgs} are passed to any subscribed handlers. The javascript code specified in the declaration here is automatically subscribed to the onClick field in the class. If, after load, you wish to unsubscribe this code from the event, use obj.onClick.unSubscribe("click");]]></description>
            <name>onClick</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fires when any node is deselected. {@link nitobi.ui.ElementEventArgs} are passed to any subscribed handlers. The javascript code specified in the declaration here is automatically subscribed to the onDeselect field in the class. If, after load, you wish to unsubscribe this code from the event, use obj.onDeselect.unSubscribe("deselect");]]></description>
            <name>onDeselect</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fires when any node is selected. {@link nitobi.ui.ElementEventArgs} are passed to any subscribed handlers. The javascript code specified in the declaration here is automatically subscribed to the onSelect field in the class. If, after load, you wish to unsubscribe this code from the event, use obj.onSelect.unSubscribe("select");]]></description>
            <name>onSelect</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fires when any node in the tree is hovered over. The hover area includes the entire width of the tree. {@link nitobi.ui.EventNotificationEventArgs} are passed to any subscribed handlers. The javascript code specified in the declaration here is automatically subscribed to the onMouseOver field in the class. If, after load, you wish to unsubscribe this code from the event, use obj.onMouseOver.unSubscribe("mouseover");]]></description>
            <name>onMouseOver</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fires when the mouse exits the area that a node occupies. This area includes the entire width of the tree. {@link nitobi.ui.EventNotificationEventArgs} are passed to any subscribed handlers. The javascript code specified in the declaration here is automatically subscribed to the onMouseOut field in the class. If, after load, you wish to unsubscribe this code from the event, use obj.onMouseOut.unSubscribe("mouseout");]]></description>
            <name>onMouseOut</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fires when data has been loaded by the tree and the tree is ready to be rendered. {@link nitobi.base.EventArgs} are passed to any subscribed handlers. The javascript code specified in the declaration here is automatically subscribed to the onDataReady field in the class. If, after load, you wish to unsubscribe this code from the event, use obj.onDataReady.unSubscribe("dataready");]]></description>
            <name>onDataReady</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[When true causes the component to load and initialize with the page.]]></description>
            <name>autoinitialize</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>

        <example>
            <![CDATA[
Static Example:

<n:tree id="tree1" cssClass="folders" cssStyle="width:500px;height:350px;">
 <n:children>
   <n:node label="node 1"/>
   <n:node label="node 2">
       <n:children>
         <n:node label="sub-node 1"/>
       </n:children>
   </n:node>
 </n:children>
</n:tree>]]>
        </example>


    </tag>
    <!-- CHILDREN TAG -->
    <tag>
        <description><![CDATA[Children is a container for ntb:node elements.]]></description>
        <name>children</name>
        <tag-class>com.nitobi.jsf.taglib.tree.ChildrenTag</tag-class>
        <body-content>scriptless</body-content>
    </tag>
    <!-- NODE TAG -->
    <tag>
        <description><![CDATA[Represent nodes of a tree]]></description>
        <name>node</name>
        <tag-class>com.nitobi.jsf.taglib.tree.NodeTag</tag-class>
        <body-content>scriptless</body-content>

        <!-- GETHANDLER ATT -->
        <attribute>
            <description>
                <![CDATA[Specifies the server-side resource containing the GetHandler populating the node. This can either be entered in two ways:
                <ul>
                    <li>Servlet: (e.g., eventsurl="eventsServlet") This option automatically looks for a servlet name as defined in the web.xml file.</li>
                    <li>Managed Bean: (e.g., eventsurl="#{mybean.mymethod}") This option requires a 'java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)' signature in your managed bean.</li>
                </ul>
                ]]>
            </description>
            <name>getHandler</name>
            <required>false</required>
            <deferred-method>
                <method-signature>java.lang.String methodName(com.nitobi.jsf.event.NitobiGetEvent)</method-signature>
            </deferred-method>
        </attribute>
        <!-- CSSCLASS ATT -->
        <attribute>
            <description>
                <![CDATA[Returns the custom CSS class set on this node. This attribute maps to the getCssClass and setCssClass functions in the Javascript API.]]></description>
            <name>cssClass</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- LABEL ATT -->
        <attribute>
            <description>
                <![CDATA[Returns the label for this node. This attribute maps to the getLabel and setLabel functions in the Javascript API. ]]></description>
            <name>label</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- EXPANDED ATT -->
        <attribute>
            <description>
                <![CDATA[	 If set to true, this node's children will be visible when the node is rendered, provided that all ancestors of this node are also expanded. If set to false, the children will be hidden.]]></description>
            <name>expanded</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- NODETYPE ATT -->
        <attribute>
            <description>
                <![CDATA[If set to node, the node will be interpreted as being able to have children (often called a node. If set to leaf, the tree will assume that this node cannot have children. If this attribute is not set, the tree will interpret the type of the node based on the data available. If the node has a children collection it is a node, if not it is a leaf.]]></description>
            <name>nodeType</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- HASCHILDREN ATT -->
        <attribute>
            <description>
                <![CDATA[	 If set to true, the node will be expandable. However, if set to false, the node will have no expand/collapse control. If this attribute is not set, the tree will interpret the number of children based on the data available.]]></description>
            <name>hasChildren</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONCLICK ATT -->
        <attribute>
            <description>
                <![CDATA[Fires when a node is clicked on. The clickable area includes the icon and the label of the node. The javascript code specified in the declaration here is automatically subscribed to the onClick field in the class. If, after load, you wish to unsubscribe this code from the event, use obj.onClick.unSubscribe("click");]]></description>
            <name>onClick</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONSELECT ATT -->
        <attribute>
            <description>
                <![CDATA[	Fires when the node is selected. The node is passed as an argument to each subscribed function. The javascript code specified in the declaration here is automatically subscribed to the onSelect field in the class. If, after load, you wish to unsubscribe this code from the event, use obj.onSelect.unSubscribe("select");]]></description>
            <name>onSelect</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONDESELECT ATT -->
        <attribute>
            <description>
                <![CDATA[Fires when the node is deselected. The node is passed as an argument to each subscribed function. The javascript code specified in the declaration here is automatically subscribed to the onDeselect field in the class. If, after load, you wish to unsubscribe this code from the event, use obj.onDeselect.unSubscribe("deselect");]]></description>
            <name>onDeselect</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- URL ATT -->
        <attribute>
            <description>
                <![CDATA[When using a tree component with a target frame, this is the URL that will be assigned to the frame's src attribute.]]></description>
            <name>url</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>

        <example><![CDATA[<n:node label="Node1" getHandler="/nodeServlet"/> ]]></example>
    </tag>

    <!--*************************************************************************************************************-->
    <!--                                          FISHEYE RELATED TAGS                                               -->
    <!--*************************************************************************************************************-->
    <!-- FISHEYE TAG -->
    <tag>
        <description>
            <![CDATA[A toolbar component featuring the fisheye zooming effect, allowing easy, user-friendly access to long lists.]]></description>
        <name>fisheye</name>
        <tag-class>com.nitobi.jsf.taglib.fisheye.FisheyeTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description>
                <![CDATA[A toolbar component featuring the fisheye zooming effect, allowing easy, user-friendly access to long lists.]]></description>
            <name>id</name>
            <required>true</required>
        </attribute>
        <attribute>
            <description>
                <![CDATA[When true this object will initialize automatically at page load. Default false.]]></description>
            <name>autoInitialize</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[How big to 'zoom' the items. Between 100 and 350 is normal. This attribute maps to the getGrowPercent and setGrowPercent functions in the Javascript API.]]></description>
            <name>growPercent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Which direction to bounce the icon. Possible values: up, down. This attribute maps to the getOpenDirection and setOpenDirection functions in the Javascript API.]]></description>
            <name>openDirection</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Which direction to expand the menu. Possible values: right, left, center. This attribute maps to the getExpandDirection and setExpandDirection functions in the Javascript API.]]></description>
            <name>expandDirection</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[In pixels, the starting icon width size. This attribute maps to the getIconWidth and setIconWidth functions in the Javascript API.]]></description>
            <name>iconWidth</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the look and feel of the fisheye components. The current options are:
                <ul>
                    <li>clearback</li>
                    <li>flex</li>
                    <li>nitobi</li>
                    <li>osx</li>
                    <li>pixel</li>
                    <li>plastik</li>
                    <li>tiger</li>
                    <li>vista</li>
                    <li>xp</li>
                </ul>
                ]]>
            </description>
            <name>theme</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <example><![CDATA[
<n:fisheye id="fisheye1" growpercent="200" opendirection="down" expanddirection="right" iconwidth="50">
  <n:menuitem imagesrc="images/file_new.png" label="New File" onclick=“alert(’new file!’)”/>
  <n:menuitem imagesrc="images/file_del.png" label="Delete File"/>
</n:fisheye> 
            ]]>
        </example>
    </tag>
    <!-- MENUITEM TAG -->
    <tag>
        <description><![CDATA[A menu item to be used with a {@link nitobi.fisheye.FishEye} object.]]></description>
        <name>menuItem</name>
        <tag-class>com.nitobi.jsf.taglib.fisheye.MenuItemTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description>
                <![CDATA[This attribute maps to the getImageSrc and setImageSrc functions in the Javascript API.]]></description>
            <name>imageSrc</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Sets the label text for the menu item. The lable is visible when the mouse is hovering over the menu item. This attribute maps to the getLabel and setLabel functions in the Javascript API.]]></description>
            <name>label</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[This event fires whenever the menu item is clicked. The javascript code specified in the declaration here is automatically subscribed to the onClick field in the class. If, after load, you wish to unsubscribe this code from the event, use obj.onClick.unSubscribe("click");]]></description>
            <name>onClick</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <example><![CDATA[<ntb:menuitem imagesrc="images/file_del.png" label="Delete File"/>]]></example>
    </tag>

    <!--*************************************************************************************************************-->
    <!--                                          SPOTLIGHT RELATED TAGS                                             -->
    <!--*************************************************************************************************************-->


    <!-- SPOTLIGHT TAG -->
    <tag id="spotlightTag">
        <description><![CDATA[<p>Spotlight is a guided tour component capable of:</p>
<ol>
<li>Visually highlighting parts of a webpage.</li>
<li>Providing a guided tour for a user.</li>
<li>Mimicking user interactions.</li></ol>
<p>It does this using a simple JavaScript API interface. Spotlight uses the Nitobi Callout component to provide stylish talk bubbles for instruction or commentary during the tour.</p>]]>
        </description>
        <name>spotlight</name>
        <tag-class>com.nitobi.jsf.taglib.spotlight.SpotlightTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description>
                <![CDATA[Defines which DOM object to attach the event that plays the spotlight.]]></description>
            <name>startingObject</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the name of the event that the startingObject will fire in order to initiate the spotlight presentation.]]></description>
            <name>startingEvent</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The initialization effect to use ('GREYSWIPE', 'NONE')]]></description>
            <name>thisEffect</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the look and feel of the spotlight components. The current options are:
                <ul>
                    <li>blue_plastic</li>
                    <li>chemicalblue</li>
                    <li>chestnut</li>
                    <li>clean</li>
                    <li>clear_black</li>
                    <li>flex</li>
                    <li>hazel</li>
                    <li>impact</li>
                    <li>malibu</li>
                    <li>mint</li>
                    <li>oceana</li>
                    <li>peanut_exclam</li>
                    <li>peanut_info</li>
                    <li>peanut_noaccess</li>
                    <li>peanut_talkbubble</li>
                    <li>pink_plastic</li>
                    <li>redline</li>
                    <li>steel</li>
                    <li>vista</li>
                    <li>xp</li>
                </ul>
                ]]>
            </description>
            <name>stylesheet</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Which style to use for the lens. 'NONE', 'ROUND', 'SQUARE', 'BURST', etc]]></description>
            <name>lensType</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[how much specifity to use on the lens. (default is 0.2)]]></description>
            <name>lensOversize</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Whether or not to precache the images involved in the spotlight tour.]]></description>
            <name>precache</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Whether or not to allow spotlight to scroll the browser page.]]></description>
            <name>allowScrolling</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>

    </tag>
    <!-- CALLOUT STEP TAG -->
    <tag>
        <description><![CDATA[Creates a callout step in the spotlight tour.]]></description>
        <name>calloutStep</name>
        <tag-class>com.nitobi.jsf.taglib.spotlight.CalloutStepTag</tag-class>
        <body-content>scriptless</body-content>

        <attribute>
            <description><![CDATA[The ID of a DOM element to attach to.]]></description>
            <name>elementId</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[What to use as the Callout's title.]]></description>
            <name>stepTitle</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[What to use as the Callout's body.]]></description>
            <name>stepBody</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <example>
            <![CDATA[
<n:spotlight startingobject="window" startingevent="load" lensoversize=".3" lenstype="round" stylesheet="peanut_exclam" thiseffect="GREYSWIPE">
    <n:calloutstep elementid="buttonOne" steptitle="The first button" stepbody="This is a <em>really</em> important button."/>
</n:spotlight>
                    ]]>
        </example>
    </tag>
    <!-- MOUSE STEP TAG -->
    <tag>
        <description><![CDATA[Creates a simulated mouse movement.]]></description>
        <name>mouseStep</name>
        <tag-class>com.nitobi.jsf.taglib.spotlight.MouseStepTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description><![CDATA[A reference to a form field OR a halsh 'myformname:myfieldname']]></description>
            <name>target</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Action for the mouse pointer to perform. Available choices: 'APPEARONOBJECT','CLICKONOBJECT','MOVETOOBJECT']]></description>
            <name>action</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[How long to wait after it is finished before advancing to the next step.]]></description>
            <name>delayAfter</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <example>
            <![CDATA[
<n:spotlight startingobject="window" startingevent="load" lensoversize=".3" lenstype="round" stylesheet="peanut_exclam" thiseffect="GREYSWIPE">
    <n:mousestep action="APPEARONOBJECT" formobject="nameField" delayafter="300"/>
</n:spotlight>
                    ]]>
        </example>
    </tag>
    <!-- CODE STEP TAG -->
    <tag>
        <description><![CDATA[Executes some javascript in sequence.]]></description>
        <name>codeStep</name>
        <tag-class>com.nitobi.jsf.taglib.spotlight.CodeStepTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description><![CDATA[Some source code to execute or a function reference.]]></description>
            <name>code</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[How long to wait after it is finished before advancing to the next step.]]></description>
            <name>delayAfter</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <example>
            <![CDATA[
<n:spotlight startingobject="window" startingevent="load" lensoversize=".3" lenstype="round" stylesheet="peanut_exclam" thiseffect="GREYSWIPE">
    <n:codestep code="alert('hello world');" delayafter="300"/>
</n:spotlight>
                    ]]>
        </example>
    </tag>
    <!-- FOCUS STEP TAG -->
    <tag>
        <description><![CDATA[Sends the lens focus to an object.]]></description>
        <name>focusStep</name>
        <tag-class>com.nitobi.jsf.taglib.spotlight.FocusStepTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description><![CDATA[The ID of a DOM element to attach to.]]></description>
            <name>elementId</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[How long to wait after it is finished before advancing to the next step.]]></description>
            <name>delayAfter</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <example>
            <![CDATA[
<n:spotlight startingobject="window" startingevent="load" lensoversize=".3" lenstype="round" stylesheet="peanut_exclam" thiseffect="GREYSWIPE">
    <n:focusstep elementid="buttonInCornerOfPage" delayafter="300"/>
</n:spotlight>
                    ]]>
        </example>
    </tag>
    <!-- FORM HELPER STEP TAG -->
    <tag>
        <description><![CDATA[Creates a simulated text field entry.]]></description>
        <name>formHelperStep</name>
        <tag-class>com.nitobi.jsf.taglib.spotlight.FormHelperStepTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description><![CDATA[The DOM id of the form. ]]></description>
            <name>formId</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The form field id designated for this step.]]></description>
            <name>fieldId</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Action to perform on the field. Current option: 'TYPETEXT']]></description>
            <name>action</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[How long to wait after it is finished before advancing to the next step.]]></description>
            <name>delayAfter</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The text for the simulator to type in the designated field.]]></description>
            <name>text</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Whether or not the mouse and lense move to the text field. Defaults to 'true'.]]></description>
            <name>setFocus</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <example>
            <![CDATA[
<n:spotlight startingobject="window" startingevent="load" lensoversize=".3" lenstype="round" stylesheet="peanut_exclam" thiseffect="GREYSWIPE">
    <n:formhelperstep formfield="myform:companyNameField" action="TYPETEXT" delayafter="300" text="Acme Cat Torture Devices, Inc"/>
</n:spotlight>
                    ]]>
        </example>
    </tag>

    <!--*************************************************************************************************************-->
    <!--                                          TABSTRIP RELATED TAGS                                              -->
    <!--*************************************************************************************************************-->
    <!-- TABSTRIP TAG -->
    <tag>
        <description>
            <![CDATA[An Ajax-powered tab-strip component with native support for other Nitobi components, client-side statefulness, and skinnability.]]></description>
        <name>tabstrip</name>
        <tag-class>com.nitobi.jsf.taglib.tabstrip.TabstripTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description><![CDATA[The unique id of this tabstrip object.]]></description>
            <name>id</name>
            <required>true</required>
            <rtexprvalue>false</rtexprvalue>
        </attribute>
        <attribute>
            <description><![CDATA[Whether or not to autoinitialize this component]]></description>
            <name>autoInitialize</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The width of the tabbed area in pixels.]]></description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The height of the tabbed area in pixels.]]></description>
            <name>height</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Which CSS class this componentent uses.]]></description>
            <name>cssClass</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Explicit CSS styles to attribute to this component.]]></description>
            <name>cssStyle</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[tabindex]]></description>
            <name>tabIndex</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the look and feel of the spotlight components. The current options are:
                <ul>
                    <li>clean_template</li>
                    <li>flex</li>
                    <li>glass</li>
                    <li>nested</li>
                    <li>nitobi</li>
                    <li>pixel</li>
                    <li>pixel_jump</li>
                    <li>plain</li>
                    <li>plastik</li>
                    <li>tiger</li>
                    <li>vista</li>
                    <li>xp</li>
                </ul>
                ]]>
            </description>
            <name>theme</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Specifies the action to perform on the 'onclick' event.]]></description>
            <name>onClick</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Specifies the action to perform on the 'onmouseout' event.]]></description>
            <name>onMouseOut</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Specifies the action to perform on the 'onmouseover' event.]]></description>
            <name>onMouseOver</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- TABS TAG -->
    <tag>
        <description>Generates a set of tabs.</description>
        <name>tabs</name>
        <tag-class>com.nitobi.jsf.taglib.tabstrip.TabsTag</tag-class>
        <body-content>scriptless</body-content>

        <attribute>
            <description><![CDATA[The height of the tabs]]></description>
            <name>height</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The alignment of the tags. Valid alignments are 'left','right', or 'center'.]]></description>
            <name>align</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[Determines how much overlap the tabs will have.]]></description>
            <name>overlap</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Determines what effect is applied when the tab is activated. Valid values are 'none' and 'fade']]></description>
            <name>activateEffect</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Returns the index of the active tab. To set the active tab via javascript, use setActiveTab() function.]]></description>
            <name>activeTabIndex</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired on click. Object nitobi.ui.ElementEventArgs are passed to the event handler.]]></description>
            <name>onClick</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired on mouse out. Object nitobi.ui.ElementEventArgs are passed to the event handler.]]></description>
            <name>onMouseOut</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired on mouse over. Object nitobi.ui.ElementEventArgs are passed to the event handler.]]></description>
            <name>onMouseOver</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired before the tabs change. If the event returns false, nothing will happen. Object nitobi.tabstrip.TabChangeEventArgs are passed to the event handler.]]></description>
            <name>onBeforeTabChange</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired after the tabs have changed. Object nitobi.tabstrip.TabChangeEventArgs are passed to the event handler.]]></description>
            <name>onTabChange</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>
    <!-- TAB TAG -->
    <tag>
        <description><![CDATA[Represents an individual tab]]></description>
        <name>tab</name>
        <tag-class>com.nitobi.jsf.taglib.tabstrip.TabTag</tag-class>
        <body-content>empty</body-content>
        <attribute>
            <description><![CDATA[The width of the tab (not the width of the container)]]></description>
            <name>width</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The tooltip]]></description>
            <name>tooltip</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[What will be displayed on the tab.]]></description>
            <name>label</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The URL or DOM object, depending on what container type you select.]]></description>
            <name>source</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The type of container for the tab body. It can be 'iframe' or 'domnode'. Defaults to domnode]]></description>
            <name>containerType</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The icon that will appear on the tab.]]></description>
            <name>icon</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The name of the CSS Class.]]></description>
            <name>cssClassName</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Determines whether or not script blocks are recursively evaluated when HTML is loaded in a tab without an iframe. The default is true.]]></description>
            <name>scriptEvaluationEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Determines whether to load the tab's contents when the tabstrip is first rendered or when the tab is first set as the active tab.]]></description>
            <name>loadOnDemandEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[When true hides any overflowed data.]]></description>
            <name>hideOverflowEnabled</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired on click. Object nitobi.ui.ElementEventArgs are passed to the event handler.]]></description>
            <name>onClick</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired on mouse out. Object nitobi.ui.ElementEventArgs are passed to the event handler.]]></description>
            <name>onMouseOut</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired on mouse over. Object nitobi.ui.ElementEventArgs are passed to the event handler.]]></description>
            <name>onMouseOver</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired on focus. nitobi.ui.ElementEventArgs are passed to the event handler.]]></description>
            <name>onFocus</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired on blur. nitobi.ui.ElementEventArgs are passed to the event handler.]]></description>
            <name>onBlur</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired when the tab is activated. nitobi.ui.ElementEventArgs are passed to the event handler.]]></description>
            <name>onActivate</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired when the tab is deactivated. nitobi.ui.ElementEventArgs are passed to the event handler.]]></description>
            <name>onDeactivate</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Fired when content finishes loading in the tab. nitobi.ui.ElementEventArgs are passed to the event handler.]]></description>
            <name>onLoad</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
    </tag>

    <!--*************************************************************************************************************-->
    <!-- CALLOUT RELATED TAGS -->
    <!--*************************************************************************************************************-->

    <!-- HINTS TAG -->
    <tag>
        <description>
            <![CDATA[This tag creates a Nitobi Hint object, defining the timing for showing and expiring. To show actual
        hints, you will need to add hint tags as children.]]>
        </description>
        <name>hints</name>
        <tag-class>com.nitobi.jsf.taglib.callout.HintsTag</tag-class>
        <body-content>scriptless</body-content>
        <attribute>
            <description><![CDATA[How long to wait before showing the callout on a mouseover.]]></description>
            <name>timerLength</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[How long to wait getting rid of the tooltip after mouseout.]]></description>
            <name>expireTimeout</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <example><![CDATA[
        <n:hints expireTimeout="5000" timerLength="1000">
            <n:hint objId="thebutton" text="This is the text." title="The Title"/>
            <n:hint objId="theOtherButton" text="This is the other text." title="The Other Title"/>
        </n:hints>
        ]]>
        </example>
    </tag>
    <!-- HINT TAG -->
    <tag>
        <description>
            <![CDATA[Use this tag to add hints to an existing Nitobi Hint object (use the JSF 'hint' tag to create).]]>
        </description>
        <display-name>Hint Tag</display-name>
        <name>hint</name>
        <tag-class>com.nitobi.jsf.taglib.callout.HintTag</tag-class>
        <body-content>empty</body-content>

        <attribute>
            <description><![CDATA[The id of the DOM element to which this hint will attach]]></description>
            <name>objId</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description><![CDATA[The title of the tooltip.]]></description>
            <name>title</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The body of the tooltip. There must either be a hint title, hint text, or both.]]>
            </description>
            <name>text</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <example>
            <![CDATA[
        <n:hints expireTimeout="5000" timerLength="1000">
            <n:hint objId="thebutton" text="This is the text." title="The Title"/>
            <n:hint objId="theOtherButton" text="This is the other text." title="The Other Title"/>
        </n:hints>
        ]]>
        </example>
    </tag>
    <!-- CALLOUT TAG -->
    <tag>
        <description><![CDATA[Creates a visual indecator on your page much like a tooltip.]]></description>
        <name>callout</name>
        <tag-class>com.nitobi.jsf.taglib.callout.CalloutTag</tag-class>
        <body-content>empty</body-content>
        <!-- ID ATTRIBUTE -->
        <attribute>
            <description><![CDATA[The DOM id (and the JSF component id) of this callout.]]></description>
            <name>id</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
        </attribute>
        <!-- THEME ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Indicates which theme will be used to display the callout. Current options:
        <ul>
            <li>blue_plastic</li>
            <li>chemical_blue</li>
            <li>chestnut</li>
            <li>clean</li>
            <li>clear_black</li>
            <li>flex</li>
            <li>hazel</li>
            <li>impact</li>
            <li>malibu</li>
            <li>peanut_exclam</li>
            <li>peanut_info</li>
            <li>peanut_noaccess</li>
            <li>peanut_talkbubble</li>
            <li>pink_plastic</li>
            <li>redline</li>
            <li>steel</li>
            <li>vista</li>
            <li>xp</li>
        </ul>
        ]]>
            </description>
            <name>theme</name>
            <required>true</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- DISPLAYJSFMESSAGE ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[When true, this callout will contain the JSF Message output. If this component is attached to a DOM
        element, it will filter the messages to display only the one meant for that DOM element. If this is true, the
        callout title is ignored and any JSF message will be inserted into the body. If there is no JSF Message for the
        page or the given DOM element, this component will not render.]]>
            </description>
            <name>displayJSFMessage</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Boolean</type>
            </deferred-value>
        </attribute>
        <!-- TRIGGERSOURCEDOM ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Specifies the DOM object that will generate the event creating the callout. This may or may not be the
        same DOM element that is attached to the callout.]]>
            </description>
            <name>triggerSourceDOM</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- TRIGGEREVENT ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[This is the trigger event that must occur for the popup to appear. If this is left blank, the callout
        will appear on the page load.]]>
            </description>
            <name>triggerEvent</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- MOVETOY ATTRIBUTE -->
        <attribute>
            <description><![CDATA[The Y coordinate the callout tail will point to.]]></description>
            <name>movetoY</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- MOVETOX ATTRIBUTE -->
        <attribute>
            <description><![CDATA[The X coordinate the callout tail will point to.]]></description>
            <name>movetoX</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ATTACHTOELEMENT ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[Will attach a callout to an HTML element on the page, identified by it's unique ID]]>
            </description>
            <name>attachToElement</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- DIRECTION ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[
        <p>Sets the direction of the callout 'tail' as it points to the DOM element or coordinates it's set on. Values
            break out to following:
        <ul>
            <li>0 - No Direction</li>
            <li>1 - Bottom Right</li>
            <li>2 - Bottom Left</li>
            <li>3 - Top Left</li>
            <li>4 - Top Right</li>
            <li>5 - Left Top</li>
            <li>6 - Left Bottom</li>
            <li>7 - Right Top</li>
            <li>8 - Right Bottom</li>
        </ul>
        ]]>
            </description>
            <name>direction</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- TITLE ATTRIBUTE -->
        <attribute>
            <description><![CDATA[The title of the callout.]]></description>
            <name>title</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- BODY ATTRIBUTE -->
        <attribute>
            <description>
                <![CDATA[The body text of the callout. This can be either flat text or HTML markup.]]>
            </description>
            <name>body</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- EXPIRETIME ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Will cause a callout to disappear after so many milliseconds]]></description>
            <name>expireTime</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- SIZEX ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Sets the width of the callout content.]]></description>
            <name>sizeX</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- SIZEY ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Sets the height of the callout content.]]></description>
            <name>sizeY</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.Integer</type>
            </deferred-value>
        </attribute>
        <!-- ONAPPEAR ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Lets you add some javascript to the onAppear event.]]></description>
            <name>onAppear</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <!-- ONDESTROY ATTRIBUTE -->
        <attribute>
            <description><![CDATA[Lets you add some javascript to the onDestroy event.]]></description>
            <name>onDestroy</name>
            <required>false</required>
            <deferred-value>
                <type>java.lang.String</type>
            </deferred-value>
        </attribute>
        <example>
            <![CDATA[
    For a custom (non-JSF) message in a callout:

    <button id="sourceButton">Click Here to Show Callout</button>
    <div id="theTarget">This is the target.</div>
    <n:callout displayJSFMessage="false"
               triggerEvent="click"
               triggerSourceDOM="sourceButton"
               style="vista"
               attachToElement="theTarget"
               movetoX="100"
               movetoY="200"
               direction="1"
               title="The Title"
               body="<ul><li>One</li><li>Two</li></ul>"/>

    For a JSF message:

    <h:form id="myForm">
        <h:outputLabel for="myInput">Input Here</h:outputLabel>
        <h:inputText id="myInput" required="true"/>
        <n:callout displayJSFMessage="true" attachToElement="myForm:myInput"/>
        <h:commandButton type="submit" value="Submit"/>
    </h:form>

    ]]>
        </example>
    </tag>
</taglib>
